"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LikesApi = exports.LikesApiFactory = exports.LikesApiFp = exports.LikesApiAxiosParamCreator = exports.DislikesApiService = exports.DislikesApi = exports.DislikesApiFactory = exports.DislikesApiFp = exports.DislikesApiAxiosParamCreator = exports.UsersScalarFieldEnum = exports.UsersGroupByInputMinEnum = exports.UsersGroupByInputMaxEnum = exports.UsersGroupByInputCountEnum = exports.UsersAggregateInputMinEnum = exports.UsersAggregateInputMaxEnum = exports.UsersAggregateInputCountEnum = exports.SortOrder = exports.QueryMode = exports.ProblemsScalarFieldEnum = exports.ProblemsGroupByInputSumEnum = exports.ProblemsGroupByInputMinEnum = exports.ProblemsGroupByInputMaxEnum = exports.ProblemsGroupByInputCountEnum = exports.ProblemsGroupByInputAvgEnum = exports.ProblemsAggregateInputSumEnum = exports.ProblemsAggregateInputMinEnum = exports.ProblemsAggregateInputMaxEnum = exports.ProblemsAggregateInputCountEnum = exports.ProblemsAggregateInputAvgEnum = exports.PostsScalarFieldEnum = exports.PostsGroupByInputMinEnum = exports.PostsGroupByInputMaxEnum = exports.PostsGroupByInputCountEnum = exports.PostsAggregateInputMinEnum = exports.PostsAggregateInputMaxEnum = exports.PostsAggregateInputCountEnum = exports.LikesScalarFieldEnum = exports.LikesGroupByInputMinEnum = exports.LikesGroupByInputMaxEnum = exports.LikesGroupByInputCountEnum = exports.LikesAggregateInputMinEnum = exports.LikesAggregateInputMaxEnum = exports.LikesAggregateInputCountEnum = exports.DislikesScalarFieldEnum = exports.DislikesGroupByInputMinEnum = exports.DislikesGroupByInputMaxEnum = exports.DislikesGroupByInputCountEnum = exports.DislikesAggregateInputMinEnum = exports.DislikesAggregateInputMaxEnum = exports.DislikesAggregateInputCountEnum = void 0;
exports.UsersApiService = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.ProblemsApiService = exports.ProblemsApi = exports.ProblemsApiFactory = exports.ProblemsApiFp = exports.ProblemsApiAxiosParamCreator = exports.PostsApiService = exports.PostsApi = exports.PostsApiFactory = exports.PostsApiFp = exports.PostsApiAxiosParamCreator = exports.LikesApiService = void 0;
var configuration_1 = require("./configuration");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.DislikesAggregateInputCountEnum = {
    All: '_all',
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.DislikesAggregateInputMaxEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.DislikesAggregateInputMinEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.DislikesGroupByInputCountEnum = {
    All: '_all',
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.DislikesGroupByInputMaxEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.DislikesGroupByInputMinEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.DislikesScalarFieldEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.LikesAggregateInputCountEnum = {
    All: '_all',
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.LikesAggregateInputMaxEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.LikesAggregateInputMinEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.LikesGroupByInputCountEnum = {
    All: '_all',
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.LikesGroupByInputMaxEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.LikesGroupByInputMinEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.LikesScalarFieldEnum = {
    Id: 'id',
    Post: 'post',
    User: 'user'
};
exports.PostsAggregateInputCountEnum = {
    All: '_all',
    Body: 'body',
    Dislikes: 'dislikes',
    Id: 'id',
    Likes: 'likes',
    Title: 'title',
    User: 'user'
};
exports.PostsAggregateInputMaxEnum = {
    Body: 'body',
    Dislikes: 'dislikes',
    Id: 'id',
    Likes: 'likes',
    Title: 'title',
    User: 'user'
};
exports.PostsAggregateInputMinEnum = {
    Body: 'body',
    Dislikes: 'dislikes',
    Id: 'id',
    Likes: 'likes',
    Title: 'title',
    User: 'user'
};
exports.PostsGroupByInputCountEnum = {
    All: '_all',
    Body: 'body',
    Dislikes: 'dislikes',
    Id: 'id',
    Likes: 'likes',
    Title: 'title',
    User: 'user'
};
exports.PostsGroupByInputMaxEnum = {
    Body: 'body',
    Dislikes: 'dislikes',
    Id: 'id',
    Likes: 'likes',
    Title: 'title',
    User: 'user'
};
exports.PostsGroupByInputMinEnum = {
    Body: 'body',
    Dislikes: 'dislikes',
    Id: 'id',
    Likes: 'likes',
    Title: 'title',
    User: 'user'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.PostsScalarFieldEnum = {
    Body: 'body',
    Dislikes: 'dislikes',
    Id: 'id',
    Likes: 'likes',
    Title: 'title',
    User: 'user'
};
exports.ProblemsAggregateInputAvgEnum = {
    Id: 'id_'
};
exports.ProblemsAggregateInputCountEnum = {
    All: '_all',
    Description: 'description',
    Done: 'done',
    Id: 'id',
    Id2: 'id_',
    Links: 'links',
    Status: 'status',
    Tags: 'tags',
    Title: 'title',
    User: 'user'
};
exports.ProblemsAggregateInputMaxEnum = {
    Description: 'description',
    Done: 'done',
    Id: 'id',
    Id2: 'id_',
    Links: 'links',
    Status: 'status',
    Tags: 'tags',
    Title: 'title',
    User: 'user'
};
exports.ProblemsAggregateInputMinEnum = {
    Description: 'description',
    Done: 'done',
    Id: 'id',
    Id2: 'id_',
    Links: 'links',
    Status: 'status',
    Tags: 'tags',
    Title: 'title',
    User: 'user'
};
exports.ProblemsAggregateInputSumEnum = {
    Id: 'id_'
};
exports.ProblemsGroupByInputAvgEnum = {
    Id: 'id_'
};
exports.ProblemsGroupByInputCountEnum = {
    All: '_all',
    Description: 'description',
    Done: 'done',
    Id: 'id',
    Id2: 'id_',
    Links: 'links',
    Status: 'status',
    Tags: 'tags',
    Title: 'title',
    User: 'user'
};
exports.ProblemsGroupByInputMaxEnum = {
    Description: 'description',
    Done: 'done',
    Id: 'id',
    Id2: 'id_',
    Links: 'links',
    Status: 'status',
    Tags: 'tags',
    Title: 'title',
    User: 'user'
};
exports.ProblemsGroupByInputMinEnum = {
    Description: 'description',
    Done: 'done',
    Id: 'id',
    Id2: 'id_',
    Links: 'links',
    Status: 'status',
    Tags: 'tags',
    Title: 'title',
    User: 'user'
};
exports.ProblemsGroupByInputSumEnum = {
    Id: 'id_'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ProblemsScalarFieldEnum = {
    Description: 'description',
    Done: 'done',
    Id: 'id',
    Id2: 'id_',
    Links: 'links',
    Status: 'status',
    Tags: 'tags',
    Title: 'title',
    User: 'user'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.QueryMode = {
    Default: 'default',
    Insensitive: 'insensitive'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.SortOrder = {
    Asc: 'asc',
    Desc: 'desc'
};
exports.UsersAggregateInputCountEnum = {
    All: '_all',
    Email: 'email',
    Id: 'id',
    Password: 'password',
    Problems: 'problems',
    Username: 'username'
};
exports.UsersAggregateInputMaxEnum = {
    Email: 'email',
    Id: 'id',
    Password: 'password',
    Problems: 'problems',
    Username: 'username'
};
exports.UsersAggregateInputMinEnum = {
    Email: 'email',
    Id: 'id',
    Password: 'password',
    Problems: 'problems',
    Username: 'username'
};
exports.UsersGroupByInputCountEnum = {
    All: '_all',
    Email: 'email',
    Id: 'id',
    Password: 'password',
    Problems: 'problems',
    Username: 'username'
};
exports.UsersGroupByInputMaxEnum = {
    Email: 'email',
    Id: 'id',
    Password: 'password',
    Problems: 'problems',
    Username: 'username'
};
exports.UsersGroupByInputMinEnum = {
    Email: 'email',
    Id: 'id',
    Password: 'password',
    Problems: 'problems',
    Username: 'username'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.UsersScalarFieldEnum = {
    Email: 'email',
    Id: 'id',
    Password: 'password',
    Problems: 'problems',
    Username: 'username'
};
/**
 * DislikesApi - axios parameter creator
 * @export
 */
var DislikesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by dislikes
         * @param {DislikesAggregateInput} select
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByDislikes: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('aggregateByDislikes', 'select', select);
                            localVarPath = "/rest/dislikes/__aggregate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple dislikes records
         * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyDislikes: function (dislikesCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'dislikesCreateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('createManyDislikes', 'dislikesCreateManyInput', dislikesCreateManyInput);
                            localVarPath = "/rest/dislikes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dislikesCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one dislikes record
         * @param {DislikesCreateInput} dislikesCreateInput
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneDislikes: function (dislikesCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'dislikesCreateInput' is not null or undefined
                            (0, common_1.assertParamExists)('createOneDislikes', 'dislikesCreateInput', dislikesCreateInput);
                            localVarPath = "/rest/dislikes/__one";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dislikesCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple dislikes records
         * @param {DislikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDislikes: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/dislikes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one dislikes record by id
         * @param {string} value
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDislikesById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('deleteDislikesById', 'value', value);
                            localVarPath = "/rest/dislikes/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple dislikes records
         * @param {DislikesSelectInput} [select]
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDislikes: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/dislikes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one dislikes record by id
         * @param {string} value
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDislikesById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('findDislikesById', 'value', value);
                            localVarPath = "/rest/dislikes/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by dislikes
         * @param {DislikesGroupByInput} select
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<DislikesScalarFieldEnum>} [groupBy]
         * @param {DislikesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByDislikes: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('groupByDislikes', 'select', select);
                            localVarPath = "/rest/dislikes/__groupBy";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple dislikes records
         * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
         * @param {DislikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDislikes: function (dislikesUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'dislikesUpdateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateDislikes', 'dislikesUpdateManyInput', dislikesUpdateManyInput);
                            localVarPath = "/rest/dislikes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dislikesUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one dislikes record by id
         * @param {string} value
         * @param {DislikesUpdateInput} dislikesUpdateInput
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDislikesById: function (value, dislikesUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('updateDislikesById', 'value', value);
                            // verify required parameter 'dislikesUpdateInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateDislikesById', 'dislikesUpdateInput', dislikesUpdateInput);
                            localVarPath = "/rest/dislikes/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(dislikesUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DislikesApiAxiosParamCreator = DislikesApiAxiosParamCreator;
/**
 * DislikesApi - functional programming interface
 * @export
 */
var DislikesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DislikesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Aggregate by dislikes
         * @param {DislikesAggregateInput} select
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByDislikes: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByDislikes(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.aggregateByDislikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple dislikes records
         * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyDislikes: function (dislikesCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyDislikes(dislikesCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.createManyDislikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one dislikes record
         * @param {DislikesCreateInput} dislikesCreateInput
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneDislikes: function (dislikesCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneDislikes(dislikesCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.createOneDislikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple dislikes records
         * @param {DislikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDislikes: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDislikes(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.deleteDislikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one dislikes record by id
         * @param {string} value
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDislikesById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteDislikesById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.deleteDislikesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple dislikes records
         * @param {DislikesSelectInput} [select]
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDislikes: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findDislikes(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.findDislikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one dislikes record by id
         * @param {string} value
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDislikesById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findDislikesById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.findDislikesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by dislikes
         * @param {DislikesGroupByInput} select
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<DislikesScalarFieldEnum>} [groupBy]
         * @param {DislikesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByDislikes: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByDislikes(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.groupByDislikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple dislikes records
         * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
         * @param {DislikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDislikes: function (dislikesUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateDislikes(dislikesUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.updateDislikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one dislikes record by id
         * @param {string} value
         * @param {DislikesUpdateInput} dislikesUpdateInput
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDislikesById: function (value, dislikesUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateDislikesById(value, dislikesUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DislikesApi.updateDislikesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DislikesApiFp = DislikesApiFp;
/**
 * DislikesApi - factory interface
 * @export
 */
var DislikesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DislikesApiFp)(configuration);
    return {
        /**
         * Aggregate by dislikes
         * @param {DislikesAggregateInput} select
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByDislikes: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByDislikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple dislikes records
         * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyDislikes: function (dislikesCreateManyInput, options) {
            return localVarFp.createManyDislikes(dislikesCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one dislikes record
         * @param {DislikesCreateInput} dislikesCreateInput
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneDislikes: function (dislikesCreateInput, select, options) {
            return localVarFp.createOneDislikes(dislikesCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple dislikes records
         * @param {DislikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDislikes: function (filter, options) {
            return localVarFp.deleteDislikes(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one dislikes record by id
         * @param {string} value
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDislikesById: function (value, select, options) {
            return localVarFp.deleteDislikesById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple dislikes records
         * @param {DislikesSelectInput} [select]
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDislikes: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findDislikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one dislikes record by id
         * @param {string} value
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDislikesById: function (value, select, options) {
            return localVarFp.findDislikesById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by dislikes
         * @param {DislikesGroupByInput} select
         * @param {DislikesWhereInput} [filter]
         * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<DislikesScalarFieldEnum>} [groupBy]
         * @param {DislikesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByDislikes: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByDislikes(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple dislikes records
         * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
         * @param {DislikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDislikes: function (dislikesUpdateManyInput, filter, options) {
            return localVarFp.updateDislikes(dislikesUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one dislikes record by id
         * @param {string} value
         * @param {DislikesUpdateInput} dislikesUpdateInput
         * @param {DislikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDislikesById: function (value, dislikesUpdateInput, select, options) {
            return localVarFp.updateDislikesById(value, dislikesUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DislikesApiFactory = DislikesApiFactory;
/**
 * DislikesApi - object-oriented interface
 * @export
 * @class DislikesApi
 * @extends {BaseAPI}
 */
var DislikesApi = /** @class */ (function (_super) {
    __extends(DislikesApi, _super);
    function DislikesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by dislikes
     * @param {DislikesAggregateInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.aggregateByDislikes = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).aggregateByDislikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple dislikes records
     * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.createManyDislikes = function (dislikesCreateManyInput, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).createManyDislikes(dislikesCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one dislikes record
     * @param {DislikesCreateInput} dislikesCreateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.createOneDislikes = function (dislikesCreateInput, select, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).createOneDislikes(dislikesCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple dislikes records
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.deleteDislikes = function (filter, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).deleteDislikes(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.deleteDislikesById = function (value, select, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).deleteDislikesById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple dislikes records
     * @param {DislikesSelectInput} [select]
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.findDislikes = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).findDislikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.findDislikesById = function (value, select, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).findDislikesById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by dislikes
     * @param {DislikesGroupByInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<DislikesScalarFieldEnum>} [groupBy]
     * @param {DislikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.groupByDislikes = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).groupByDislikes(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple dislikes records
     * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.updateDislikes = function (dislikesUpdateManyInput, filter, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).updateDislikes(dislikesUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one dislikes record by id
     * @param {string} value
     * @param {DislikesUpdateInput} dislikesUpdateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    DislikesApi.prototype.updateDislikesById = function (value, dislikesUpdateInput, select, options) {
        var _this = this;
        return (0, exports.DislikesApiFp)(this.configuration).updateDislikesById(value, dislikesUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DislikesApi;
}(base_1.BaseAPI));
exports.DislikesApi = DislikesApi;
exports.DislikesApiService = new DislikesApi(configuration_1.neureloConfig);
/**
 * LikesApi - axios parameter creator
 * @export
 */
var LikesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by likes
         * @param {LikesAggregateInput} select
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByLikes: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('aggregateByLikes', 'select', select);
                            localVarPath = "/rest/likes/__aggregate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple likes records
         * @param {Array<LikesCreateManyInput>} likesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyLikes: function (likesCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'likesCreateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('createManyLikes', 'likesCreateManyInput', likesCreateManyInput);
                            localVarPath = "/rest/likes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(likesCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one likes record
         * @param {LikesCreateInput} likesCreateInput
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneLikes: function (likesCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'likesCreateInput' is not null or undefined
                            (0, common_1.assertParamExists)('createOneLikes', 'likesCreateInput', likesCreateInput);
                            localVarPath = "/rest/likes/__one";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(likesCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple likes records
         * @param {LikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikes: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/likes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one likes record by id
         * @param {string} value
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikesById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('deleteLikesById', 'value', value);
                            localVarPath = "/rest/likes/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple likes records
         * @param {LikesSelectInput} [select]
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLikes: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/likes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one likes record by id
         * @param {string} value
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLikesById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('findLikesById', 'value', value);
                            localVarPath = "/rest/likes/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by likes
         * @param {LikesGroupByInput} select
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<LikesScalarFieldEnum>} [groupBy]
         * @param {LikesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByLikes: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('groupByLikes', 'select', select);
                            localVarPath = "/rest/likes/__groupBy";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple likes records
         * @param {LikesUpdateManyInput} likesUpdateManyInput
         * @param {LikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLikes: function (likesUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'likesUpdateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateLikes', 'likesUpdateManyInput', likesUpdateManyInput);
                            localVarPath = "/rest/likes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(likesUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one likes record by id
         * @param {string} value
         * @param {LikesUpdateInput} likesUpdateInput
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLikesById: function (value, likesUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('updateLikesById', 'value', value);
                            // verify required parameter 'likesUpdateInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateLikesById', 'likesUpdateInput', likesUpdateInput);
                            localVarPath = "/rest/likes/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(likesUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LikesApiAxiosParamCreator = LikesApiAxiosParamCreator;
/**
 * LikesApi - functional programming interface
 * @export
 */
var LikesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LikesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Aggregate by likes
         * @param {LikesAggregateInput} select
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByLikes: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByLikes(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.aggregateByLikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple likes records
         * @param {Array<LikesCreateManyInput>} likesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyLikes: function (likesCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyLikes(likesCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.createManyLikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one likes record
         * @param {LikesCreateInput} likesCreateInput
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneLikes: function (likesCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneLikes(likesCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.createOneLikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple likes records
         * @param {LikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikes: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLikes(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.deleteLikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one likes record by id
         * @param {string} value
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikesById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteLikesById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.deleteLikesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple likes records
         * @param {LikesSelectInput} [select]
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLikes: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findLikes(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.findLikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one likes record by id
         * @param {string} value
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLikesById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findLikesById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.findLikesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by likes
         * @param {LikesGroupByInput} select
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<LikesScalarFieldEnum>} [groupBy]
         * @param {LikesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByLikes: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByLikes(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.groupByLikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple likes records
         * @param {LikesUpdateManyInput} likesUpdateManyInput
         * @param {LikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLikes: function (likesUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLikes(likesUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.updateLikes']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one likes record by id
         * @param {string} value
         * @param {LikesUpdateInput} likesUpdateInput
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLikesById: function (value, likesUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLikesById(value, likesUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LikesApi.updateLikesById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.LikesApiFp = LikesApiFp;
/**
 * LikesApi - factory interface
 * @export
 */
var LikesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LikesApiFp)(configuration);
    return {
        /**
         * Aggregate by likes
         * @param {LikesAggregateInput} select
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByLikes: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByLikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple likes records
         * @param {Array<LikesCreateManyInput>} likesCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyLikes: function (likesCreateManyInput, options) {
            return localVarFp.createManyLikes(likesCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one likes record
         * @param {LikesCreateInput} likesCreateInput
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneLikes: function (likesCreateInput, select, options) {
            return localVarFp.createOneLikes(likesCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple likes records
         * @param {LikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikes: function (filter, options) {
            return localVarFp.deleteLikes(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one likes record by id
         * @param {string} value
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikesById: function (value, select, options) {
            return localVarFp.deleteLikesById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple likes records
         * @param {LikesSelectInput} [select]
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLikes: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findLikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one likes record by id
         * @param {string} value
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLikesById: function (value, select, options) {
            return localVarFp.findLikesById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by likes
         * @param {LikesGroupByInput} select
         * @param {LikesWhereInput} [filter]
         * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
         * @param {Array<LikesScalarFieldEnum>} [groupBy]
         * @param {LikesScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByLikes: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByLikes(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple likes records
         * @param {LikesUpdateManyInput} likesUpdateManyInput
         * @param {LikesWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLikes: function (likesUpdateManyInput, filter, options) {
            return localVarFp.updateLikes(likesUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one likes record by id
         * @param {string} value
         * @param {LikesUpdateInput} likesUpdateInput
         * @param {LikesSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLikesById: function (value, likesUpdateInput, select, options) {
            return localVarFp.updateLikesById(value, likesUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LikesApiFactory = LikesApiFactory;
/**
 * LikesApi - object-oriented interface
 * @export
 * @class LikesApi
 * @extends {BaseAPI}
 */
var LikesApi = /** @class */ (function (_super) {
    __extends(LikesApi, _super);
    function LikesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by likes
     * @param {LikesAggregateInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.aggregateByLikes = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).aggregateByLikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple likes records
     * @param {Array<LikesCreateManyInput>} likesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.createManyLikes = function (likesCreateManyInput, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).createManyLikes(likesCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one likes record
     * @param {LikesCreateInput} likesCreateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.createOneLikes = function (likesCreateInput, select, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).createOneLikes(likesCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple likes records
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.deleteLikes = function (filter, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).deleteLikes(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.deleteLikesById = function (value, select, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).deleteLikesById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple likes records
     * @param {LikesSelectInput} [select]
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.findLikes = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).findLikes(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.findLikesById = function (value, select, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).findLikesById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by likes
     * @param {LikesGroupByInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<LikesScalarFieldEnum>} [groupBy]
     * @param {LikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.groupByLikes = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).groupByLikes(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple likes records
     * @param {LikesUpdateManyInput} likesUpdateManyInput
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.updateLikes = function (likesUpdateManyInput, filter, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).updateLikes(likesUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one likes record by id
     * @param {string} value
     * @param {LikesUpdateInput} likesUpdateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    LikesApi.prototype.updateLikesById = function (value, likesUpdateInput, select, options) {
        var _this = this;
        return (0, exports.LikesApiFp)(this.configuration).updateLikesById(value, likesUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LikesApi;
}(base_1.BaseAPI));
exports.LikesApi = LikesApi;
exports.LikesApiService = new LikesApi(configuration_1.neureloConfig);
/**
 * PostsApi - axios parameter creator
 * @export
 */
var PostsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by posts
         * @param {PostsAggregateInput} select
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByPosts: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('aggregateByPosts', 'select', select);
                            localVarPath = "/rest/posts/__aggregate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple posts records
         * @param {Array<PostsCreateManyInput>} postsCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyPosts: function (postsCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'postsCreateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('createManyPosts', 'postsCreateManyInput', postsCreateManyInput);
                            localVarPath = "/rest/posts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postsCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one posts record
         * @param {PostsCreateInput} postsCreateInput
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOnePosts: function (postsCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'postsCreateInput' is not null or undefined
                            (0, common_1.assertParamExists)('createOnePosts', 'postsCreateInput', postsCreateInput);
                            localVarPath = "/rest/posts/__one";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postsCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple posts records
         * @param {PostsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePosts: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/posts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one posts record by id
         * @param {string} value
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostsById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('deletePostsById', 'value', value);
                            localVarPath = "/rest/posts/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple posts records
         * @param {PostsSelectInput} [select]
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPosts: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/posts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one posts record by id
         * @param {string} value
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPostsById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('findPostsById', 'value', value);
                            localVarPath = "/rest/posts/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by posts
         * @param {PostsGroupByInput} select
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
         * @param {Array<PostsScalarFieldEnum>} [groupBy]
         * @param {PostsScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByPosts: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('groupByPosts', 'select', select);
                            localVarPath = "/rest/posts/__groupBy";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple posts records
         * @param {PostsUpdateManyInput} postsUpdateManyInput
         * @param {PostsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosts: function (postsUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'postsUpdateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('updatePosts', 'postsUpdateManyInput', postsUpdateManyInput);
                            localVarPath = "/rest/posts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postsUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one posts record by id
         * @param {string} value
         * @param {PostsUpdateInput} postsUpdateInput
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostsById: function (value, postsUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('updatePostsById', 'value', value);
                            // verify required parameter 'postsUpdateInput' is not null or undefined
                            (0, common_1.assertParamExists)('updatePostsById', 'postsUpdateInput', postsUpdateInput);
                            localVarPath = "/rest/posts/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postsUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PostsApiAxiosParamCreator = PostsApiAxiosParamCreator;
/**
 * PostsApi - functional programming interface
 * @export
 */
var PostsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PostsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Aggregate by posts
         * @param {PostsAggregateInput} select
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByPosts: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByPosts(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.aggregateByPosts']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple posts records
         * @param {Array<PostsCreateManyInput>} postsCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyPosts: function (postsCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyPosts(postsCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.createManyPosts']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one posts record
         * @param {PostsCreateInput} postsCreateInput
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOnePosts: function (postsCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOnePosts(postsCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.createOnePosts']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple posts records
         * @param {PostsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePosts: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePosts(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.deletePosts']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one posts record by id
         * @param {string} value
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostsById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePostsById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.deletePostsById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple posts records
         * @param {PostsSelectInput} [select]
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPosts: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findPosts(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.findPosts']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one posts record by id
         * @param {string} value
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPostsById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findPostsById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.findPostsById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by posts
         * @param {PostsGroupByInput} select
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
         * @param {Array<PostsScalarFieldEnum>} [groupBy]
         * @param {PostsScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByPosts: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByPosts(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.groupByPosts']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple posts records
         * @param {PostsUpdateManyInput} postsUpdateManyInput
         * @param {PostsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosts: function (postsUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePosts(postsUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.updatePosts']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one posts record by id
         * @param {string} value
         * @param {PostsUpdateInput} postsUpdateInput
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostsById: function (value, postsUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePostsById(value, postsUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PostsApi.updatePostsById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PostsApiFp = PostsApiFp;
/**
 * PostsApi - factory interface
 * @export
 */
var PostsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PostsApiFp)(configuration);
    return {
        /**
         * Aggregate by posts
         * @param {PostsAggregateInput} select
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByPosts: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByPosts(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple posts records
         * @param {Array<PostsCreateManyInput>} postsCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyPosts: function (postsCreateManyInput, options) {
            return localVarFp.createManyPosts(postsCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one posts record
         * @param {PostsCreateInput} postsCreateInput
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOnePosts: function (postsCreateInput, select, options) {
            return localVarFp.createOnePosts(postsCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple posts records
         * @param {PostsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePosts: function (filter, options) {
            return localVarFp.deletePosts(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one posts record by id
         * @param {string} value
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePostsById: function (value, select, options) {
            return localVarFp.deletePostsById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple posts records
         * @param {PostsSelectInput} [select]
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPosts: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findPosts(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one posts record by id
         * @param {string} value
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPostsById: function (value, select, options) {
            return localVarFp.findPostsById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by posts
         * @param {PostsGroupByInput} select
         * @param {PostsWhereInput} [filter]
         * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
         * @param {Array<PostsScalarFieldEnum>} [groupBy]
         * @param {PostsScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByPosts: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByPosts(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple posts records
         * @param {PostsUpdateManyInput} postsUpdateManyInput
         * @param {PostsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePosts: function (postsUpdateManyInput, filter, options) {
            return localVarFp.updatePosts(postsUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one posts record by id
         * @param {string} value
         * @param {PostsUpdateInput} postsUpdateInput
         * @param {PostsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePostsById: function (value, postsUpdateInput, select, options) {
            return localVarFp.updatePostsById(value, postsUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PostsApiFactory = PostsApiFactory;
/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
var PostsApi = /** @class */ (function (_super) {
    __extends(PostsApi, _super);
    function PostsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by posts
     * @param {PostsAggregateInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.aggregateByPosts = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).aggregateByPosts(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple posts records
     * @param {Array<PostsCreateManyInput>} postsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.createManyPosts = function (postsCreateManyInput, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).createManyPosts(postsCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one posts record
     * @param {PostsCreateInput} postsCreateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.createOnePosts = function (postsCreateInput, select, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).createOnePosts(postsCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple posts records
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.deletePosts = function (filter, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).deletePosts(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.deletePostsById = function (value, select, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).deletePostsById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple posts records
     * @param {PostsSelectInput} [select]
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.findPosts = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).findPosts(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.findPostsById = function (value, select, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).findPostsById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by posts
     * @param {PostsGroupByInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<PostsScalarFieldEnum>} [groupBy]
     * @param {PostsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.groupByPosts = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).groupByPosts(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple posts records
     * @param {PostsUpdateManyInput} postsUpdateManyInput
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.updatePosts = function (postsUpdateManyInput, filter, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).updatePosts(postsUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one posts record by id
     * @param {string} value
     * @param {PostsUpdateInput} postsUpdateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    PostsApi.prototype.updatePostsById = function (value, postsUpdateInput, select, options) {
        var _this = this;
        return (0, exports.PostsApiFp)(this.configuration).updatePostsById(value, postsUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PostsApi;
}(base_1.BaseAPI));
exports.PostsApi = PostsApi;
exports.PostsApiService = new PostsApi(configuration_1.neureloConfig);
/**
 * ProblemsApi - axios parameter creator
 * @export
 */
var ProblemsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by problems
         * @param {ProblemsAggregateInput} select
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByProblems: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('aggregateByProblems', 'select', select);
                            localVarPath = "/rest/problems/__aggregate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple problems records
         * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyProblems: function (problemsCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'problemsCreateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('createManyProblems', 'problemsCreateManyInput', problemsCreateManyInput);
                            localVarPath = "/rest/problems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(problemsCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one problems record
         * @param {ProblemsCreateInput} problemsCreateInput
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneProblems: function (problemsCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'problemsCreateInput' is not null or undefined
                            (0, common_1.assertParamExists)('createOneProblems', 'problemsCreateInput', problemsCreateInput);
                            localVarPath = "/rest/problems/__one";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(problemsCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple problems records
         * @param {ProblemsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProblems: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/problems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one problems record by id
         * @param {string} value
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProblemsById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProblemsById', 'value', value);
                            localVarPath = "/rest/problems/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple problems records
         * @param {ProblemsSelectInput} [select]
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProblems: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/problems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one problems record by id
         * @param {string} value
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProblemsById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('findProblemsById', 'value', value);
                            localVarPath = "/rest/problems/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by problems
         * @param {ProblemsGroupByInput} select
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
         * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
         * @param {ProblemsScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByProblems: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('groupByProblems', 'select', select);
                            localVarPath = "/rest/problems/__groupBy";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple problems records
         * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
         * @param {ProblemsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProblems: function (problemsUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'problemsUpdateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateProblems', 'problemsUpdateManyInput', problemsUpdateManyInput);
                            localVarPath = "/rest/problems";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(problemsUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one problems record by id
         * @param {string} value
         * @param {ProblemsUpdateInput} problemsUpdateInput
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProblemsById: function (value, problemsUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('updateProblemsById', 'value', value);
                            // verify required parameter 'problemsUpdateInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateProblemsById', 'problemsUpdateInput', problemsUpdateInput);
                            localVarPath = "/rest/problems/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(problemsUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ProblemsApiAxiosParamCreator = ProblemsApiAxiosParamCreator;
/**
 * ProblemsApi - functional programming interface
 * @export
 */
var ProblemsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ProblemsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Aggregate by problems
         * @param {ProblemsAggregateInput} select
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByProblems: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByProblems(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.aggregateByProblems']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple problems records
         * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyProblems: function (problemsCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyProblems(problemsCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.createManyProblems']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one problems record
         * @param {ProblemsCreateInput} problemsCreateInput
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneProblems: function (problemsCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneProblems(problemsCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.createOneProblems']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple problems records
         * @param {ProblemsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProblems: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProblems(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.deleteProblems']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one problems record by id
         * @param {string} value
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProblemsById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProblemsById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.deleteProblemsById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple problems records
         * @param {ProblemsSelectInput} [select]
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProblems: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findProblems(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.findProblems']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one problems record by id
         * @param {string} value
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProblemsById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findProblemsById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.findProblemsById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by problems
         * @param {ProblemsGroupByInput} select
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
         * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
         * @param {ProblemsScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByProblems: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByProblems(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.groupByProblems']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple problems records
         * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
         * @param {ProblemsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProblems: function (problemsUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateProblems(problemsUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.updateProblems']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one problems record by id
         * @param {string} value
         * @param {ProblemsUpdateInput} problemsUpdateInput
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProblemsById: function (value, problemsUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateProblemsById(value, problemsUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProblemsApi.updateProblemsById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ProblemsApiFp = ProblemsApiFp;
/**
 * ProblemsApi - factory interface
 * @export
 */
var ProblemsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ProblemsApiFp)(configuration);
    return {
        /**
         * Aggregate by problems
         * @param {ProblemsAggregateInput} select
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByProblems: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByProblems(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple problems records
         * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyProblems: function (problemsCreateManyInput, options) {
            return localVarFp.createManyProblems(problemsCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one problems record
         * @param {ProblemsCreateInput} problemsCreateInput
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneProblems: function (problemsCreateInput, select, options) {
            return localVarFp.createOneProblems(problemsCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple problems records
         * @param {ProblemsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProblems: function (filter, options) {
            return localVarFp.deleteProblems(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one problems record by id
         * @param {string} value
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProblemsById: function (value, select, options) {
            return localVarFp.deleteProblemsById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple problems records
         * @param {ProblemsSelectInput} [select]
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProblems: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findProblems(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one problems record by id
         * @param {string} value
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProblemsById: function (value, select, options) {
            return localVarFp.findProblemsById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by problems
         * @param {ProblemsGroupByInput} select
         * @param {ProblemsWhereInput} [filter]
         * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
         * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
         * @param {ProblemsScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByProblems: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByProblems(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple problems records
         * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
         * @param {ProblemsWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProblems: function (problemsUpdateManyInput, filter, options) {
            return localVarFp.updateProblems(problemsUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one problems record by id
         * @param {string} value
         * @param {ProblemsUpdateInput} problemsUpdateInput
         * @param {ProblemsSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProblemsById: function (value, problemsUpdateInput, select, options) {
            return localVarFp.updateProblemsById(value, problemsUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ProblemsApiFactory = ProblemsApiFactory;
/**
 * ProblemsApi - object-oriented interface
 * @export
 * @class ProblemsApi
 * @extends {BaseAPI}
 */
var ProblemsApi = /** @class */ (function (_super) {
    __extends(ProblemsApi, _super);
    function ProblemsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by problems
     * @param {ProblemsAggregateInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.aggregateByProblems = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).aggregateByProblems(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple problems records
     * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.createManyProblems = function (problemsCreateManyInput, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).createManyProblems(problemsCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one problems record
     * @param {ProblemsCreateInput} problemsCreateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.createOneProblems = function (problemsCreateInput, select, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).createOneProblems(problemsCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple problems records
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.deleteProblems = function (filter, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).deleteProblems(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.deleteProblemsById = function (value, select, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).deleteProblemsById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple problems records
     * @param {ProblemsSelectInput} [select]
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.findProblems = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).findProblems(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.findProblemsById = function (value, select, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).findProblemsById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by problems
     * @param {ProblemsGroupByInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
     * @param {ProblemsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.groupByProblems = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).groupByProblems(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple problems records
     * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.updateProblems = function (problemsUpdateManyInput, filter, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).updateProblems(problemsUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one problems record by id
     * @param {string} value
     * @param {ProblemsUpdateInput} problemsUpdateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    ProblemsApi.prototype.updateProblemsById = function (value, problemsUpdateInput, select, options) {
        var _this = this;
        return (0, exports.ProblemsApiFp)(this.configuration).updateProblemsById(value, problemsUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProblemsApi;
}(base_1.BaseAPI));
exports.ProblemsApi = ProblemsApi;
exports.ProblemsApiService = new ProblemsApi(configuration_1.neureloConfig);
/**
 * UsersApi - axios parameter creator
 * @export
 */
var UsersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Aggregate by users
         * @param {UsersAggregateInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByUsers: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('aggregateByUsers', 'select', select);
                            localVarPath = "/rest/users/__aggregate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create multiple users records
         * @param {Array<UsersCreateManyInput>} usersCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyUsers: function (usersCreateManyInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'usersCreateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('createManyUsers', 'usersCreateManyInput', usersCreateManyInput);
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersCreateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create one users record
         * @param {UsersCreateInput} usersCreateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneUsers: function (usersCreateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'usersCreateInput' is not null or undefined
                            (0, common_1.assertParamExists)('createOneUsers', 'usersCreateInput', usersCreateInput);
                            localVarPath = "/rest/users/__one";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersCreateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete multiple users records
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByEmail: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUsersByEmail', 'value', value);
                            localVarPath = "/rest/users/email/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('deleteUsersById', 'value', value);
                            localVarPath = "/rest/users/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple users records
         * @param {UsersSelectInput} [select]
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: function (select, filter, orderBy, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByEmail: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('findUsersByEmail', 'value', value);
                            localVarPath = "/rest/users/email/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Find one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersById: function (value, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('findUsersById', 'value', value);
                            localVarPath = "/rest/users/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Group by users
         * @param {UsersGroupByInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
         * @param {Array<UsersScalarFieldEnum>} [groupBy]
         * @param {UsersScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByUsers: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'select' is not null or undefined
                            (0, common_1.assertParamExists)('groupByUsers', 'select', select);
                            localVarPath = "/rest/users/__groupBy";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (orderBy) {
                                localVarQueryParameter['order_by'] = orderBy;
                            }
                            if (groupBy) {
                                localVarQueryParameter['group_by'] = groupBy;
                            }
                            if (having !== undefined) {
                                localVarQueryParameter['having'] = having;
                            }
                            if (skip !== undefined) {
                                localVarQueryParameter['skip'] = skip;
                            }
                            if (take !== undefined) {
                                localVarQueryParameter['take'] = take;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update multiple users records
         * @param {UsersUpdateManyInput} usersUpdateManyInput
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: function (usersUpdateManyInput, filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'usersUpdateManyInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateUsers', 'usersUpdateManyInput', usersUpdateManyInput);
                            localVarPath = "/rest/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersUpdateManyInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one users record by email
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByEmail: function (value, usersUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('updateUsersByEmail', 'value', value);
                            // verify required parameter 'usersUpdateInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateUsersByEmail', 'usersUpdateInput', usersUpdateInput);
                            localVarPath = "/rest/users/email/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update one users record by id
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersById: function (value, usersUpdateInput, select, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('updateUsersById', 'value', value);
                            // verify required parameter 'usersUpdateInput' is not null or undefined
                            (0, common_1.assertParamExists)('updateUsersById', 'usersUpdateInput', usersUpdateInput);
                            localVarPath = "/rest/users/{value}"
                                .replace("{".concat("value", "}"), String(value));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKey required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-API-KEY", configuration)];
                        case 1:
                            // authentication ApiKey required
                            _a.sent();
                            if (select !== undefined) {
                                localVarQueryParameter['select'] = select;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersUpdateInput, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 * @export
 */
var UsersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Aggregate by users
         * @param {UsersAggregateInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByUsers: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.aggregateByUsers(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.aggregateByUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create multiple users records
         * @param {Array<UsersCreateManyInput>} usersCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyUsers: function (usersCreateManyInput, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createManyUsers(usersCreateManyInput, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.createManyUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create one users record
         * @param {UsersCreateInput} usersCreateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneUsers: function (usersCreateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOneUsers(usersCreateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.createOneUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete multiple users records
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: function (filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUsers(filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.deleteUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByEmail: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUsersByEmail(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.deleteUsersByEmail']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteUsersById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.deleteUsersById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Retrieve multiple users records
         * @param {UsersSelectInput} [select]
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: function (select, filter, orderBy, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findUsers(select, filter, orderBy, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.findUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByEmail: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findUsersByEmail(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.findUsersByEmail']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Find one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersById: function (value, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.findUsersById(value, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.findUsersById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Group by users
         * @param {UsersGroupByInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
         * @param {Array<UsersScalarFieldEnum>} [groupBy]
         * @param {UsersScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByUsers: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupByUsers(select, filter, orderBy, groupBy, having, skip, take, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.groupByUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update multiple users records
         * @param {UsersUpdateManyInput} usersUpdateManyInput
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: function (usersUpdateManyInput, filter, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUsers(usersUpdateManyInput, filter, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.updateUsers']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one users record by email
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByEmail: function (value, usersUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUsersByEmail(value, usersUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.updateUsersByEmail']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update one users record by id
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersById: function (value, usersUpdateInput, select, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateUsersById(value, usersUpdateInput, select, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.updateUsersById']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, base_1.globalAxios, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - factory interface
 * @export
 */
var UsersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UsersApiFp)(configuration);
    return {
        /**
         * Aggregate by users
         * @param {UsersAggregateInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateByUsers: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.aggregateByUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create multiple users records
         * @param {Array<UsersCreateManyInput>} usersCreateManyInput
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createManyUsers: function (usersCreateManyInput, options) {
            return localVarFp.createManyUsers(usersCreateManyInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create one users record
         * @param {UsersCreateInput} usersCreateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneUsers: function (usersCreateInput, select, options) {
            return localVarFp.createOneUsers(usersCreateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete multiple users records
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsers: function (filter, options) {
            return localVarFp.deleteUsers(filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersByEmail: function (value, select, options) {
            return localVarFp.deleteUsersByEmail(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsersById: function (value, select, options) {
            return localVarFp.deleteUsersById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve multiple users records
         * @param {UsersSelectInput} [select]
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsers: function (select, filter, orderBy, skip, take, options) {
            return localVarFp.findUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one users record by email
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersByEmail: function (value, select, options) {
            return localVarFp.findUsersByEmail(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Find one users record by id
         * @param {string} value
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersById: function (value, select, options) {
            return localVarFp.findUsersById(value, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Group by users
         * @param {UsersGroupByInput} select
         * @param {UsersWhereInput} [filter]
         * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
         * @param {Array<UsersScalarFieldEnum>} [groupBy]
         * @param {UsersScalarWhereWithAggregatesInput} [having]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupByUsers: function (select, filter, orderBy, groupBy, having, skip, take, options) {
            return localVarFp.groupByUsers(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update multiple users records
         * @param {UsersUpdateManyInput} usersUpdateManyInput
         * @param {UsersWhereInput} [filter]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsers: function (usersUpdateManyInput, filter, options) {
            return localVarFp.updateUsers(usersUpdateManyInput, filter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one users record by email
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersByEmail: function (value, usersUpdateInput, select, options) {
            return localVarFp.updateUsersByEmail(value, usersUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update one users record by id
         * @param {string} value
         * @param {UsersUpdateInput} usersUpdateInput
         * @param {UsersSelectInput} [select]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsersById: function (value, usersUpdateInput, select, options) {
            return localVarFp.updateUsersById(value, usersUpdateInput, select, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UsersApiFactory = UsersApiFactory;
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.aggregateByUsers = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).aggregateByUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createManyUsers = function (usersCreateManyInput, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).createManyUsers(usersCreateManyInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.createOneUsers = function (usersCreateInput, select, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).createOneUsers(usersCreateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUsers = function (filter, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).deleteUsers(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUsersByEmail = function (value, select, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).deleteUsersByEmail(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.deleteUsersById = function (value, select, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).deleteUsersById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUsers = function (select, filter, orderBy, skip, take, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).findUsers(select, filter, orderBy, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUsersByEmail = function (value, select, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).findUsersByEmail(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.findUsersById = function (value, select, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).findUsersById(value, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.groupByUsers = function (select, filter, orderBy, groupBy, having, skip, take, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).groupByUsers(select, filter, orderBy, groupBy, having, skip, take, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUsers = function (usersUpdateManyInput, filter, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).updateUsers(usersUpdateManyInput, filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUsersByEmail = function (value, usersUpdateInput, select, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).updateUsersByEmail(value, usersUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.updateUsersById = function (value, usersUpdateInput, select, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).updateUsersById(value, usersUpdateInput, select, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersApi;
}(base_1.BaseAPI));
exports.UsersApi = UsersApi;
exports.UsersApiService = new UsersApi(configuration_1.neureloConfig);
