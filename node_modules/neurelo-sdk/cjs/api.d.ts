/**
 * Neurelo API Spec
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { type Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AffectedRowsOutput
 */
export interface AffectedRowsOutput {
    /**
     *
     * @type {number}
     * @memberof AffectedRowsOutput
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface AggregateByDislikes200Response
 */
export interface AggregateByDislikes200Response {
    /**
     *
     * @type {AggregateDislikes}
     * @memberof AggregateByDislikes200Response
     */
    'data': AggregateDislikes;
}
/**
 *
 * @export
 * @interface AggregateByLikes200Response
 */
export interface AggregateByLikes200Response {
    /**
     *
     * @type {AggregateLikes}
     * @memberof AggregateByLikes200Response
     */
    'data': AggregateLikes;
}
/**
 *
 * @export
 * @interface AggregateByPosts200Response
 */
export interface AggregateByPosts200Response {
    /**
     *
     * @type {AggregatePosts}
     * @memberof AggregateByPosts200Response
     */
    'data': AggregatePosts;
}
/**
 *
 * @export
 * @interface AggregateByProblems200Response
 */
export interface AggregateByProblems200Response {
    /**
     *
     * @type {AggregateProblems}
     * @memberof AggregateByProblems200Response
     */
    'data': AggregateProblems;
}
/**
 *
 * @export
 * @interface AggregateByUsers200Response
 */
export interface AggregateByUsers200Response {
    /**
     *
     * @type {AggregateUsers}
     * @memberof AggregateByUsers200Response
     */
    'data': AggregateUsers;
}
/**
 *
 * @export
 * @interface AggregateDislikes
 */
export interface AggregateDislikes {
    /**
     *
     * @type {DislikesCountAggregateOutputType}
     * @memberof AggregateDislikes
     */
    '_count'?: DislikesCountAggregateOutputType;
    /**
     *
     * @type {DislikesMaxAggregateOutputType}
     * @memberof AggregateDislikes
     */
    '_max'?: DislikesMaxAggregateOutputType;
    /**
     *
     * @type {DislikesMinAggregateOutputType}
     * @memberof AggregateDislikes
     */
    '_min'?: DislikesMinAggregateOutputType;
}
/**
 *
 * @export
 * @interface AggregateLikes
 */
export interface AggregateLikes {
    /**
     *
     * @type {LikesCountAggregateOutputType}
     * @memberof AggregateLikes
     */
    '_count'?: LikesCountAggregateOutputType;
    /**
     *
     * @type {LikesMaxAggregateOutputType}
     * @memberof AggregateLikes
     */
    '_max'?: LikesMaxAggregateOutputType;
    /**
     *
     * @type {LikesMinAggregateOutputType}
     * @memberof AggregateLikes
     */
    '_min'?: LikesMinAggregateOutputType;
}
/**
 *
 * @export
 * @interface AggregatePosts
 */
export interface AggregatePosts {
    /**
     *
     * @type {PostsCountAggregateOutputType}
     * @memberof AggregatePosts
     */
    '_count'?: PostsCountAggregateOutputType;
    /**
     *
     * @type {PostsMaxAggregateOutputType}
     * @memberof AggregatePosts
     */
    '_max'?: PostsMaxAggregateOutputType;
    /**
     *
     * @type {PostsMinAggregateOutputType}
     * @memberof AggregatePosts
     */
    '_min'?: PostsMinAggregateOutputType;
}
/**
 *
 * @export
 * @interface AggregateProblems
 */
export interface AggregateProblems {
    /**
     *
     * @type {ProblemsAvgAggregateOutputType}
     * @memberof AggregateProblems
     */
    '_avg'?: ProblemsAvgAggregateOutputType;
    /**
     *
     * @type {ProblemsCountAggregateOutputType}
     * @memberof AggregateProblems
     */
    '_count'?: ProblemsCountAggregateOutputType;
    /**
     *
     * @type {ProblemsMaxAggregateOutputType}
     * @memberof AggregateProblems
     */
    '_max'?: ProblemsMaxAggregateOutputType;
    /**
     *
     * @type {ProblemsMinAggregateOutputType}
     * @memberof AggregateProblems
     */
    '_min'?: ProblemsMinAggregateOutputType;
    /**
     *
     * @type {ProblemsSumAggregateOutputType}
     * @memberof AggregateProblems
     */
    '_sum'?: ProblemsSumAggregateOutputType;
}
/**
 *
 * @export
 * @interface AggregateUsers
 */
export interface AggregateUsers {
    /**
     *
     * @type {UsersCountAggregateOutputType}
     * @memberof AggregateUsers
     */
    '_count'?: UsersCountAggregateOutputType;
    /**
     *
     * @type {UsersMaxAggregateOutputType}
     * @memberof AggregateUsers
     */
    '_max'?: UsersMaxAggregateOutputType;
    /**
     *
     * @type {UsersMinAggregateOutputType}
     * @memberof AggregateUsers
     */
    '_min'?: UsersMinAggregateOutputType;
}
/**
 *
 * @export
 * @interface BoolNullableFilter
 */
export interface BoolNullableFilter {
    /**
     *
     * @type {boolean}
     * @memberof BoolNullableFilter
     */
    'eq'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof BoolNullableFilter
     */
    'equals'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof BoolNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {BoolNullableFilterNot}
     * @memberof BoolNullableFilter
     */
    'not'?: BoolNullableFilterNot | null;
}
/**
 * @type BoolNullableFilterNot
 * @export
 */
export type BoolNullableFilterNot = NestedBoolNullableFilter | boolean;
/**
 *
 * @export
 * @interface BoolNullableWithAggregatesFilter
 */
export interface BoolNullableWithAggregatesFilter {
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof BoolNullableWithAggregatesFilter
     */
    '_count'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedBoolNullableFilter}
     * @memberof BoolNullableWithAggregatesFilter
     */
    '_max'?: NestedBoolNullableFilter;
    /**
     *
     * @type {NestedBoolNullableFilter}
     * @memberof BoolNullableWithAggregatesFilter
     */
    '_min'?: NestedBoolNullableFilter;
    /**
     *
     * @type {boolean}
     * @memberof BoolNullableWithAggregatesFilter
     */
    'eq'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof BoolNullableWithAggregatesFilter
     */
    'equals'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof BoolNullableWithAggregatesFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {BoolNullableWithAggregatesFilterNot}
     * @memberof BoolNullableWithAggregatesFilter
     */
    'not'?: BoolNullableWithAggregatesFilterNot | null;
}
/**
 * @type BoolNullableWithAggregatesFilterNot
 * @export
 */
export type BoolNullableWithAggregatesFilterNot = NestedBoolNullableWithAggregatesFilter | boolean;
/**
 *
 * @export
 * @interface CreateManyDislikes201Response
 */
export interface CreateManyDislikes201Response {
    /**
     *
     * @type {AffectedRowsOutput}
     * @memberof CreateManyDislikes201Response
     */
    'data': AffectedRowsOutput;
}
/**
 *
 * @export
 * @interface CreateOneDislikes201Response
 */
export interface CreateOneDislikes201Response {
    /**
     *
     * @type {Dislikes}
     * @memberof CreateOneDislikes201Response
     */
    'data': Dislikes;
}
/**
 *
 * @export
 * @interface CreateOneLikes201Response
 */
export interface CreateOneLikes201Response {
    /**
     *
     * @type {Likes}
     * @memberof CreateOneLikes201Response
     */
    'data': Likes;
}
/**
 *
 * @export
 * @interface CreateOnePosts201Response
 */
export interface CreateOnePosts201Response {
    /**
     *
     * @type {Posts}
     * @memberof CreateOnePosts201Response
     */
    'data': Posts;
}
/**
 *
 * @export
 * @interface CreateOneProblems201Response
 */
export interface CreateOneProblems201Response {
    /**
     *
     * @type {Problems}
     * @memberof CreateOneProblems201Response
     */
    'data': Problems;
}
/**
 *
 * @export
 * @interface CreateOneUsers201Response
 */
export interface CreateOneUsers201Response {
    /**
     *
     * @type {Users}
     * @memberof CreateOneUsers201Response
     */
    'data': Users;
}
/**
 *
 * @export
 * @interface Dislikes
 */
export interface Dislikes {
    /**
     *
     * @type {string}
     * @memberof Dislikes
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Dislikes
     */
    'post'?: string;
    /**
     *
     * @type {string}
     * @memberof Dislikes
     */
    'user'?: string;
}
/**
 *
 * @export
 * @interface DislikesAggregateInput
 */
export interface DislikesAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof DislikesAggregateInput
     */
    '_count'?: Array<DislikesAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof DislikesAggregateInput
     */
    '_max'?: Array<DislikesAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof DislikesAggregateInput
     */
    '_min'?: Array<DislikesAggregateInputMinEnum>;
}
export declare const DislikesAggregateInputCountEnum: {
    readonly All: "_all";
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type DislikesAggregateInputCountEnum = typeof DislikesAggregateInputCountEnum[keyof typeof DislikesAggregateInputCountEnum];
export declare const DislikesAggregateInputMaxEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type DislikesAggregateInputMaxEnum = typeof DislikesAggregateInputMaxEnum[keyof typeof DislikesAggregateInputMaxEnum];
export declare const DislikesAggregateInputMinEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type DislikesAggregateInputMinEnum = typeof DislikesAggregateInputMinEnum[keyof typeof DislikesAggregateInputMinEnum];
/**
 *
 * @export
 * @interface DislikesCountAggregateOutputType
 */
export interface DislikesCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof DislikesCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof DislikesCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof DislikesCountAggregateOutputType
     */
    'post'?: number;
    /**
     *
     * @type {number}
     * @memberof DislikesCountAggregateOutputType
     */
    'user'?: number;
}
/**
 *
 * @export
 * @interface DislikesCountOrderByAggregateInput
 */
export interface DislikesCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesCountOrderByAggregateInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesCountOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface DislikesCreateInput
 */
export interface DislikesCreateInput {
    /**
     *
     * @type {string}
     * @memberof DislikesCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof DislikesCreateInput
     */
    'post': string;
    /**
     *
     * @type {string}
     * @memberof DislikesCreateInput
     */
    'user': string;
}
/**
 *
 * @export
 * @interface DislikesCreateManyInput
 */
export interface DislikesCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof DislikesCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof DislikesCreateManyInput
     */
    'post': string;
    /**
     *
     * @type {string}
     * @memberof DislikesCreateManyInput
     */
    'user': string;
}
/**
 *
 * @export
 * @interface DislikesGroupByInput
 */
export interface DislikesGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof DislikesGroupByInput
     */
    '_count'?: Array<DislikesGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof DislikesGroupByInput
     */
    '_max'?: Array<DislikesGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof DislikesGroupByInput
     */
    '_min'?: Array<DislikesGroupByInputMinEnum>;
    /**
     *
     * @type {boolean}
     * @memberof DislikesGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DislikesGroupByInput
     */
    'post'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DislikesGroupByInput
     */
    'user'?: boolean;
}
export declare const DislikesGroupByInputCountEnum: {
    readonly All: "_all";
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type DislikesGroupByInputCountEnum = typeof DislikesGroupByInputCountEnum[keyof typeof DislikesGroupByInputCountEnum];
export declare const DislikesGroupByInputMaxEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type DislikesGroupByInputMaxEnum = typeof DislikesGroupByInputMaxEnum[keyof typeof DislikesGroupByInputMaxEnum];
export declare const DislikesGroupByInputMinEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type DislikesGroupByInputMinEnum = typeof DislikesGroupByInputMinEnum[keyof typeof DislikesGroupByInputMinEnum];
/**
 *
 * @export
 * @interface DislikesGroupByOutputType
 */
export interface DislikesGroupByOutputType {
    /**
     *
     * @type {DislikesCountAggregateOutputType}
     * @memberof DislikesGroupByOutputType
     */
    '_count'?: DislikesCountAggregateOutputType;
    /**
     *
     * @type {DislikesMaxAggregateOutputType}
     * @memberof DislikesGroupByOutputType
     */
    '_max'?: DislikesMaxAggregateOutputType;
    /**
     *
     * @type {DislikesMinAggregateOutputType}
     * @memberof DislikesGroupByOutputType
     */
    '_min'?: DislikesMinAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof DislikesGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof DislikesGroupByOutputType
     */
    'post'?: string;
    /**
     *
     * @type {string}
     * @memberof DislikesGroupByOutputType
     */
    'user'?: string;
}
/**
 *
 * @export
 * @interface DislikesMaxAggregateOutputType
 */
export interface DislikesMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof DislikesMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DislikesMaxAggregateOutputType
     */
    'post'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DislikesMaxAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface DislikesMaxOrderByAggregateInput
 */
export interface DislikesMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesMaxOrderByAggregateInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesMaxOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface DislikesMinAggregateOutputType
 */
export interface DislikesMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof DislikesMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DislikesMinAggregateOutputType
     */
    'post'?: string | null;
    /**
     *
     * @type {string}
     * @memberof DislikesMinAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface DislikesMinOrderByAggregateInput
 */
export interface DislikesMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesMinOrderByAggregateInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesMinOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface DislikesOrderByWithAggregationInput
 */
export interface DislikesOrderByWithAggregationInput {
    /**
     *
     * @type {DislikesCountOrderByAggregateInput}
     * @memberof DislikesOrderByWithAggregationInput
     */
    '_count'?: DislikesCountOrderByAggregateInput;
    /**
     *
     * @type {DislikesMaxOrderByAggregateInput}
     * @memberof DislikesOrderByWithAggregationInput
     */
    '_max'?: DislikesMaxOrderByAggregateInput;
    /**
     *
     * @type {DislikesMinOrderByAggregateInput}
     * @memberof DislikesOrderByWithAggregationInput
     */
    '_min'?: DislikesMinOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesOrderByWithAggregationInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesOrderByWithAggregationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface DislikesOrderByWithRelationInput
 */
export interface DislikesOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesOrderByWithRelationInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof DislikesOrderByWithRelationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const DislikesScalarFieldEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type DislikesScalarFieldEnum = typeof DislikesScalarFieldEnum[keyof typeof DislikesScalarFieldEnum];
/**
 *
 * @export
 * @interface DislikesScalarWhereWithAggregatesInput
 */
export interface DislikesScalarWhereWithAggregatesInput {
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputAND}
     * @memberof DislikesScalarWhereWithAggregatesInput
     */
    'AND'?: DislikesScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputAND}
     * @memberof DislikesScalarWhereWithAggregatesInput
     */
    'NOT'?: DislikesScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<DislikesScalarWhereWithAggregatesInput>}
     * @memberof DislikesScalarWhereWithAggregatesInput
     */
    'OR'?: Array<DislikesScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof DislikesScalarWhereWithAggregatesInput
     */
    'id'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof DislikesScalarWhereWithAggregatesInput
     */
    'post'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof DislikesScalarWhereWithAggregatesInput
     */
    'user'?: DislikesScalarWhereWithAggregatesInputId;
}
/**
 * @type DislikesScalarWhereWithAggregatesInputAND
 * @export
 */
export type DislikesScalarWhereWithAggregatesInputAND = Array<DislikesScalarWhereWithAggregatesInput> | DislikesScalarWhereWithAggregatesInput;
/**
 * @type DislikesScalarWhereWithAggregatesInputId
 * @export
 */
export type DislikesScalarWhereWithAggregatesInputId = StringWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface DislikesSelectInput
 */
export interface DislikesSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof DislikesSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DislikesSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DislikesSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DislikesSelectInput
     */
    'post'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof DislikesSelectInput
     */
    'user'?: boolean;
}
/**
 *
 * @export
 * @interface DislikesUpdateInput
 */
export interface DislikesUpdateInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof DislikesUpdateInput
     */
    'post'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof DislikesUpdateInput
     */
    'user'?: DislikesUpdateInputPost;
}
/**
 * @type DislikesUpdateInputPost
 * @export
 */
export type DislikesUpdateInputPost = StringFieldUpdateOperationsInput | string;
/**
 *
 * @export
 * @interface DislikesUpdateManyInput
 */
export interface DislikesUpdateManyInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof DislikesUpdateManyInput
     */
    'post'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof DislikesUpdateManyInput
     */
    'user'?: DislikesUpdateInputPost;
}
/**
 *
 * @export
 * @interface DislikesWhereInput
 */
export interface DislikesWhereInput {
    /**
     *
     * @type {DislikesWhereInputAND}
     * @memberof DislikesWhereInput
     */
    'AND'?: DislikesWhereInputAND;
    /**
     *
     * @type {DislikesWhereInputAND}
     * @memberof DislikesWhereInput
     */
    'NOT'?: DislikesWhereInputAND;
    /**
     *
     * @type {Array<DislikesWhereInput>}
     * @memberof DislikesWhereInput
     */
    'OR'?: Array<DislikesWhereInput>;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof DislikesWhereInput
     */
    'id'?: DislikesWhereInputId;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof DislikesWhereInput
     */
    'post'?: DislikesWhereInputId;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof DislikesWhereInput
     */
    'user'?: DislikesWhereInputId;
}
/**
 * @type DislikesWhereInputAND
 * @export
 */
export type DislikesWhereInputAND = Array<DislikesWhereInput> | DislikesWhereInput;
/**
 * @type DislikesWhereInputId
 * @export
 */
export type DislikesWhereInputId = StringFilter | string;
/**
 *
 * @export
 * @interface DislikesWhereUniqueInput
 */
export interface DislikesWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof DislikesWhereUniqueInput
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {object}
     * @memberof ErrorResponse
     */
    'details'?: object;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
}
/**
 *
 * @export
 * @interface FindDislikes200Response
 */
export interface FindDislikes200Response {
    /**
     *
     * @type {Array<Dislikes>}
     * @memberof FindDislikes200Response
     */
    'data': Array<Dislikes>;
}
/**
 *
 * @export
 * @interface FindDislikes400Response
 */
export interface FindDislikes400Response {
    /**
     *
     * @type {Array<ErrorResponse>}
     * @memberof FindDislikes400Response
     */
    'errors': Array<ErrorResponse>;
}
/**
 *
 * @export
 * @interface FindLikes200Response
 */
export interface FindLikes200Response {
    /**
     *
     * @type {Array<Likes>}
     * @memberof FindLikes200Response
     */
    'data': Array<Likes>;
}
/**
 *
 * @export
 * @interface FindPosts200Response
 */
export interface FindPosts200Response {
    /**
     *
     * @type {Array<Posts>}
     * @memberof FindPosts200Response
     */
    'data': Array<Posts>;
}
/**
 *
 * @export
 * @interface FindProblems200Response
 */
export interface FindProblems200Response {
    /**
     *
     * @type {Array<Problems>}
     * @memberof FindProblems200Response
     */
    'data': Array<Problems>;
}
/**
 *
 * @export
 * @interface FindUsers200Response
 */
export interface FindUsers200Response {
    /**
     *
     * @type {Array<Users>}
     * @memberof FindUsers200Response
     */
    'data': Array<Users>;
}
/**
 *
 * @export
 * @interface GroupByDislikes200Response
 */
export interface GroupByDislikes200Response {
    /**
     *
     * @type {Array<DislikesGroupByOutputType>}
     * @memberof GroupByDislikes200Response
     */
    'data': Array<DislikesGroupByOutputType>;
}
/**
 *
 * @export
 * @interface GroupByLikes200Response
 */
export interface GroupByLikes200Response {
    /**
     *
     * @type {Array<LikesGroupByOutputType>}
     * @memberof GroupByLikes200Response
     */
    'data': Array<LikesGroupByOutputType>;
}
/**
 *
 * @export
 * @interface GroupByPosts200Response
 */
export interface GroupByPosts200Response {
    /**
     *
     * @type {Array<PostsGroupByOutputType>}
     * @memberof GroupByPosts200Response
     */
    'data': Array<PostsGroupByOutputType>;
}
/**
 *
 * @export
 * @interface GroupByProblems200Response
 */
export interface GroupByProblems200Response {
    /**
     *
     * @type {Array<ProblemsGroupByOutputType>}
     * @memberof GroupByProblems200Response
     */
    'data': Array<ProblemsGroupByOutputType>;
}
/**
 *
 * @export
 * @interface GroupByUsers200Response
 */
export interface GroupByUsers200Response {
    /**
     *
     * @type {Array<UsersGroupByOutputType>}
     * @memberof GroupByUsers200Response
     */
    'data': Array<UsersGroupByOutputType>;
}
/**
 *
 * @export
 * @interface IntNullableFilter
 */
export interface IntNullableFilter {
    /**
     *
     * @type {number}
     * @memberof IntNullableFilter
     */
    'eq'?: number | null;
    /**
     *
     * @type {number}
     * @memberof IntNullableFilter
     */
    'equals'?: number | null;
    /**
     *
     * @type {number}
     * @memberof IntNullableFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof IntNullableFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof IntNullableFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {boolean}
     * @memberof IntNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {number}
     * @memberof IntNullableFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof IntNullableFilter
     */
    'lte'?: number;
    /**
     *
     * @type {IntNullableFilterNot}
     * @memberof IntNullableFilter
     */
    'not'?: IntNullableFilterNot | null;
    /**
     *
     * @type {Array<number>}
     * @memberof IntNullableFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type IntNullableFilterNot
 * @export
 */
export type IntNullableFilterNot = NestedIntNullableFilter | number;
/**
 *
 * @export
 * @interface IntNullableWithAggregatesFilter
 */
export interface IntNullableWithAggregatesFilter {
    /**
     *
     * @type {NestedFloatNullableFilter}
     * @memberof IntNullableWithAggregatesFilter
     */
    '_avg'?: NestedFloatNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof IntNullableWithAggregatesFilter
     */
    '_count'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof IntNullableWithAggregatesFilter
     */
    '_max'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof IntNullableWithAggregatesFilter
     */
    '_min'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof IntNullableWithAggregatesFilter
     */
    '_sum'?: NestedIntNullableFilter;
    /**
     *
     * @type {number}
     * @memberof IntNullableWithAggregatesFilter
     */
    'eq'?: number | null;
    /**
     *
     * @type {number}
     * @memberof IntNullableWithAggregatesFilter
     */
    'equals'?: number | null;
    /**
     *
     * @type {number}
     * @memberof IntNullableWithAggregatesFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof IntNullableWithAggregatesFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof IntNullableWithAggregatesFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {boolean}
     * @memberof IntNullableWithAggregatesFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {number}
     * @memberof IntNullableWithAggregatesFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof IntNullableWithAggregatesFilter
     */
    'lte'?: number;
    /**
     *
     * @type {IntNullableWithAggregatesFilterNot}
     * @memberof IntNullableWithAggregatesFilter
     */
    'not'?: IntNullableWithAggregatesFilterNot | null;
    /**
     *
     * @type {Array<number>}
     * @memberof IntNullableWithAggregatesFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type IntNullableWithAggregatesFilterNot
 * @export
 */
export type IntNullableWithAggregatesFilterNot = NestedIntNullableWithAggregatesFilter | number;
/**
 *
 * @export
 * @interface JsonNullableFilter
 */
export interface JsonNullableFilter {
    /**
     *
     * @type {any}
     * @memberof JsonNullableFilter
     */
    'equals'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof JsonNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {any}
     * @memberof JsonNullableFilter
     */
    'not'?: any | null;
}
/**
 *
 * @export
 * @interface JsonNullableWithAggregatesFilter
 */
export interface JsonNullableWithAggregatesFilter {
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof JsonNullableWithAggregatesFilter
     */
    '_count'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedJsonNullableFilter}
     * @memberof JsonNullableWithAggregatesFilter
     */
    '_max'?: NestedJsonNullableFilter;
    /**
     *
     * @type {NestedJsonNullableFilter}
     * @memberof JsonNullableWithAggregatesFilter
     */
    '_min'?: NestedJsonNullableFilter;
    /**
     *
     * @type {any}
     * @memberof JsonNullableWithAggregatesFilter
     */
    'equals'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof JsonNullableWithAggregatesFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {any}
     * @memberof JsonNullableWithAggregatesFilter
     */
    'not'?: any | null;
}
/**
 *
 * @export
 * @interface Likes
 */
export interface Likes {
    /**
     *
     * @type {string}
     * @memberof Likes
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Likes
     */
    'post'?: string;
    /**
     *
     * @type {string}
     * @memberof Likes
     */
    'user'?: string;
}
/**
 *
 * @export
 * @interface LikesAggregateInput
 */
export interface LikesAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof LikesAggregateInput
     */
    '_count'?: Array<LikesAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof LikesAggregateInput
     */
    '_max'?: Array<LikesAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof LikesAggregateInput
     */
    '_min'?: Array<LikesAggregateInputMinEnum>;
}
export declare const LikesAggregateInputCountEnum: {
    readonly All: "_all";
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type LikesAggregateInputCountEnum = typeof LikesAggregateInputCountEnum[keyof typeof LikesAggregateInputCountEnum];
export declare const LikesAggregateInputMaxEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type LikesAggregateInputMaxEnum = typeof LikesAggregateInputMaxEnum[keyof typeof LikesAggregateInputMaxEnum];
export declare const LikesAggregateInputMinEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type LikesAggregateInputMinEnum = typeof LikesAggregateInputMinEnum[keyof typeof LikesAggregateInputMinEnum];
/**
 *
 * @export
 * @interface LikesCountAggregateOutputType
 */
export interface LikesCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof LikesCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof LikesCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof LikesCountAggregateOutputType
     */
    'post'?: number;
    /**
     *
     * @type {number}
     * @memberof LikesCountAggregateOutputType
     */
    'user'?: number;
}
/**
 *
 * @export
 * @interface LikesCountOrderByAggregateInput
 */
export interface LikesCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof LikesCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesCountOrderByAggregateInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesCountOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface LikesCreateInput
 */
export interface LikesCreateInput {
    /**
     *
     * @type {string}
     * @memberof LikesCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof LikesCreateInput
     */
    'post': string;
    /**
     *
     * @type {string}
     * @memberof LikesCreateInput
     */
    'user': string;
}
/**
 *
 * @export
 * @interface LikesCreateManyInput
 */
export interface LikesCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof LikesCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof LikesCreateManyInput
     */
    'post': string;
    /**
     *
     * @type {string}
     * @memberof LikesCreateManyInput
     */
    'user': string;
}
/**
 *
 * @export
 * @interface LikesGroupByInput
 */
export interface LikesGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof LikesGroupByInput
     */
    '_count'?: Array<LikesGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof LikesGroupByInput
     */
    '_max'?: Array<LikesGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof LikesGroupByInput
     */
    '_min'?: Array<LikesGroupByInputMinEnum>;
    /**
     *
     * @type {boolean}
     * @memberof LikesGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof LikesGroupByInput
     */
    'post'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof LikesGroupByInput
     */
    'user'?: boolean;
}
export declare const LikesGroupByInputCountEnum: {
    readonly All: "_all";
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type LikesGroupByInputCountEnum = typeof LikesGroupByInputCountEnum[keyof typeof LikesGroupByInputCountEnum];
export declare const LikesGroupByInputMaxEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type LikesGroupByInputMaxEnum = typeof LikesGroupByInputMaxEnum[keyof typeof LikesGroupByInputMaxEnum];
export declare const LikesGroupByInputMinEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type LikesGroupByInputMinEnum = typeof LikesGroupByInputMinEnum[keyof typeof LikesGroupByInputMinEnum];
/**
 *
 * @export
 * @interface LikesGroupByOutputType
 */
export interface LikesGroupByOutputType {
    /**
     *
     * @type {LikesCountAggregateOutputType}
     * @memberof LikesGroupByOutputType
     */
    '_count'?: LikesCountAggregateOutputType;
    /**
     *
     * @type {LikesMaxAggregateOutputType}
     * @memberof LikesGroupByOutputType
     */
    '_max'?: LikesMaxAggregateOutputType;
    /**
     *
     * @type {LikesMinAggregateOutputType}
     * @memberof LikesGroupByOutputType
     */
    '_min'?: LikesMinAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof LikesGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof LikesGroupByOutputType
     */
    'post'?: string;
    /**
     *
     * @type {string}
     * @memberof LikesGroupByOutputType
     */
    'user'?: string;
}
/**
 *
 * @export
 * @interface LikesMaxAggregateOutputType
 */
export interface LikesMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof LikesMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LikesMaxAggregateOutputType
     */
    'post'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LikesMaxAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface LikesMaxOrderByAggregateInput
 */
export interface LikesMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof LikesMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesMaxOrderByAggregateInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesMaxOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface LikesMinAggregateOutputType
 */
export interface LikesMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof LikesMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LikesMinAggregateOutputType
     */
    'post'?: string | null;
    /**
     *
     * @type {string}
     * @memberof LikesMinAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface LikesMinOrderByAggregateInput
 */
export interface LikesMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof LikesMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesMinOrderByAggregateInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesMinOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface LikesOrderByWithAggregationInput
 */
export interface LikesOrderByWithAggregationInput {
    /**
     *
     * @type {LikesCountOrderByAggregateInput}
     * @memberof LikesOrderByWithAggregationInput
     */
    '_count'?: LikesCountOrderByAggregateInput;
    /**
     *
     * @type {LikesMaxOrderByAggregateInput}
     * @memberof LikesOrderByWithAggregationInput
     */
    '_max'?: LikesMaxOrderByAggregateInput;
    /**
     *
     * @type {LikesMinOrderByAggregateInput}
     * @memberof LikesOrderByWithAggregationInput
     */
    '_min'?: LikesMinOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesOrderByWithAggregationInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesOrderByWithAggregationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface LikesOrderByWithRelationInput
 */
export interface LikesOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof LikesOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesOrderByWithRelationInput
     */
    'post'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof LikesOrderByWithRelationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const LikesScalarFieldEnum: {
    readonly Id: "id";
    readonly Post: "post";
    readonly User: "user";
};
export type LikesScalarFieldEnum = typeof LikesScalarFieldEnum[keyof typeof LikesScalarFieldEnum];
/**
 *
 * @export
 * @interface LikesScalarWhereWithAggregatesInput
 */
export interface LikesScalarWhereWithAggregatesInput {
    /**
     *
     * @type {LikesScalarWhereWithAggregatesInputAND}
     * @memberof LikesScalarWhereWithAggregatesInput
     */
    'AND'?: LikesScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {LikesScalarWhereWithAggregatesInputAND}
     * @memberof LikesScalarWhereWithAggregatesInput
     */
    'NOT'?: LikesScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<LikesScalarWhereWithAggregatesInput>}
     * @memberof LikesScalarWhereWithAggregatesInput
     */
    'OR'?: Array<LikesScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof LikesScalarWhereWithAggregatesInput
     */
    'id'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof LikesScalarWhereWithAggregatesInput
     */
    'post'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof LikesScalarWhereWithAggregatesInput
     */
    'user'?: DislikesScalarWhereWithAggregatesInputId;
}
/**
 * @type LikesScalarWhereWithAggregatesInputAND
 * @export
 */
export type LikesScalarWhereWithAggregatesInputAND = Array<LikesScalarWhereWithAggregatesInput> | LikesScalarWhereWithAggregatesInput;
/**
 *
 * @export
 * @interface LikesSelectInput
 */
export interface LikesSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof LikesSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof LikesSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof LikesSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof LikesSelectInput
     */
    'post'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof LikesSelectInput
     */
    'user'?: boolean;
}
/**
 *
 * @export
 * @interface LikesUpdateInput
 */
export interface LikesUpdateInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof LikesUpdateInput
     */
    'post'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof LikesUpdateInput
     */
    'user'?: DislikesUpdateInputPost;
}
/**
 *
 * @export
 * @interface LikesUpdateManyInput
 */
export interface LikesUpdateManyInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof LikesUpdateManyInput
     */
    'post'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof LikesUpdateManyInput
     */
    'user'?: DislikesUpdateInputPost;
}
/**
 *
 * @export
 * @interface LikesWhereInput
 */
export interface LikesWhereInput {
    /**
     *
     * @type {LikesWhereInputAND}
     * @memberof LikesWhereInput
     */
    'AND'?: LikesWhereInputAND;
    /**
     *
     * @type {LikesWhereInputAND}
     * @memberof LikesWhereInput
     */
    'NOT'?: LikesWhereInputAND;
    /**
     *
     * @type {Array<LikesWhereInput>}
     * @memberof LikesWhereInput
     */
    'OR'?: Array<LikesWhereInput>;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof LikesWhereInput
     */
    'id'?: DislikesWhereInputId;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof LikesWhereInput
     */
    'post'?: DislikesWhereInputId;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof LikesWhereInput
     */
    'user'?: DislikesWhereInputId;
}
/**
 * @type LikesWhereInputAND
 * @export
 */
export type LikesWhereInputAND = Array<LikesWhereInput> | LikesWhereInput;
/**
 *
 * @export
 * @interface LikesWhereUniqueInput
 */
export interface LikesWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof LikesWhereUniqueInput
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface NestedBoolNullableFilter
 */
export interface NestedBoolNullableFilter {
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolNullableFilter
     */
    'eq'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolNullableFilter
     */
    'equals'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {BoolNullableFilterNot}
     * @memberof NestedBoolNullableFilter
     */
    'not'?: BoolNullableFilterNot | null;
}
/**
 *
 * @export
 * @interface NestedBoolNullableWithAggregatesFilter
 */
export interface NestedBoolNullableWithAggregatesFilter {
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof NestedBoolNullableWithAggregatesFilter
     */
    '_count'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedBoolNullableFilter}
     * @memberof NestedBoolNullableWithAggregatesFilter
     */
    '_max'?: NestedBoolNullableFilter;
    /**
     *
     * @type {NestedBoolNullableFilter}
     * @memberof NestedBoolNullableWithAggregatesFilter
     */
    '_min'?: NestedBoolNullableFilter;
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolNullableWithAggregatesFilter
     */
    'eq'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolNullableWithAggregatesFilter
     */
    'equals'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof NestedBoolNullableWithAggregatesFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {BoolNullableWithAggregatesFilterNot}
     * @memberof NestedBoolNullableWithAggregatesFilter
     */
    'not'?: BoolNullableWithAggregatesFilterNot | null;
}
/**
 *
 * @export
 * @interface NestedFloatNullableFilter
 */
export interface NestedFloatNullableFilter {
    /**
     *
     * @type {number}
     * @memberof NestedFloatNullableFilter
     */
    'eq'?: number | null;
    /**
     *
     * @type {number}
     * @memberof NestedFloatNullableFilter
     */
    'equals'?: number | null;
    /**
     *
     * @type {number}
     * @memberof NestedFloatNullableFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatNullableFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedFloatNullableFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {boolean}
     * @memberof NestedFloatNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {number}
     * @memberof NestedFloatNullableFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedFloatNullableFilter
     */
    'lte'?: number;
    /**
     *
     * @type {NestedFloatNullableFilterNot}
     * @memberof NestedFloatNullableFilter
     */
    'not'?: NestedFloatNullableFilterNot | null;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedFloatNullableFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type NestedFloatNullableFilterNot
 * @export
 */
export type NestedFloatNullableFilterNot = NestedFloatNullableFilter | number;
/**
 *
 * @export
 * @interface NestedIntFilter
 */
export interface NestedIntFilter {
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'eq'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'equals'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntFilter
     */
    'lte'?: number;
    /**
     *
     * @type {NestedIntFilterNot}
     * @memberof NestedIntFilter
     */
    'not'?: NestedIntFilterNot;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntFilter
     */
    'notIn'?: Array<number>;
}
/**
 * @type NestedIntFilterNot
 * @export
 */
export type NestedIntFilterNot = NestedIntFilter | number;
/**
 *
 * @export
 * @interface NestedIntNullableFilter
 */
export interface NestedIntNullableFilter {
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableFilter
     */
    'eq'?: number | null;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableFilter
     */
    'equals'?: number | null;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntNullableFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {boolean}
     * @memberof NestedIntNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableFilter
     */
    'lte'?: number;
    /**
     *
     * @type {IntNullableFilterNot}
     * @memberof NestedIntNullableFilter
     */
    'not'?: IntNullableFilterNot | null;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntNullableFilter
     */
    'notIn'?: Array<number>;
}
/**
 *
 * @export
 * @interface NestedIntNullableWithAggregatesFilter
 */
export interface NestedIntNullableWithAggregatesFilter {
    /**
     *
     * @type {NestedFloatNullableFilter}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    '_avg'?: NestedFloatNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    '_count'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    '_max'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    '_min'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    '_sum'?: NestedIntNullableFilter;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'eq'?: number | null;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'equals'?: number | null;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'gt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'gte'?: number;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'in'?: Array<number>;
    /**
     *
     * @type {boolean}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'lt'?: number;
    /**
     *
     * @type {number}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'lte'?: number;
    /**
     *
     * @type {IntNullableWithAggregatesFilterNot}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'not'?: IntNullableWithAggregatesFilterNot | null;
    /**
     *
     * @type {Array<number>}
     * @memberof NestedIntNullableWithAggregatesFilter
     */
    'notIn'?: Array<number>;
}
/**
 *
 * @export
 * @interface NestedJsonNullableFilter
 */
export interface NestedJsonNullableFilter {
    /**
     *
     * @type {any}
     * @memberof NestedJsonNullableFilter
     */
    'equals'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof NestedJsonNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {any}
     * @memberof NestedJsonNullableFilter
     */
    'not'?: any | null;
}
/**
 *
 * @export
 * @interface NestedStringFilter
 */
export interface NestedStringFilter {
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof NestedStringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringFilterNot
 * @export
 */
export type NestedStringFilterNot = NestedStringFilter | string;
/**
 *
 * @export
 * @interface NestedStringNullableFilter
 */
export interface NestedStringNullableFilter {
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringNullableFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof NestedStringNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringNullableFilterNot}
     * @memberof NestedStringNullableFilter
     */
    'not'?: NestedStringNullableFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringNullableFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringNullableFilterNot
 * @export
 */
export type NestedStringNullableFilterNot = NestedStringNullableFilter | string;
/**
 *
 * @export
 * @interface NestedStringNullableWithAggregatesFilter
 */
export interface NestedStringNullableWithAggregatesFilter {
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    '_count'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedStringNullableFilter}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    '_max'?: NestedStringNullableFilter;
    /**
     *
     * @type {NestedStringNullableFilter}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    '_min'?: NestedStringNullableFilter;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringNullableWithAggregatesFilterNot}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'not'?: NestedStringNullableWithAggregatesFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringNullableWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringNullableWithAggregatesFilterNot
 * @export
 */
export type NestedStringNullableWithAggregatesFilterNot = NestedStringNullableWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface NestedStringWithAggregatesFilter
 */
export interface NestedStringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof NestedStringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof NestedStringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof NestedStringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof NestedStringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 * @type NestedStringWithAggregatesFilterNot
 * @export
 */
export type NestedStringWithAggregatesFilterNot = NestedStringWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface NullableBoolFieldUpdateOperationsInput
 */
export interface NullableBoolFieldUpdateOperationsInput {
    /**
     *
     * @type {boolean}
     * @memberof NullableBoolFieldUpdateOperationsInput
     */
    'set'?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof NullableBoolFieldUpdateOperationsInput
     */
    'unset'?: boolean;
}
/**
 *
 * @export
 * @interface NullableIntFieldUpdateOperationsInput
 */
export interface NullableIntFieldUpdateOperationsInput {
    /**
     *
     * @type {number}
     * @memberof NullableIntFieldUpdateOperationsInput
     */
    'decrement'?: number;
    /**
     *
     * @type {number}
     * @memberof NullableIntFieldUpdateOperationsInput
     */
    'divide'?: number;
    /**
     *
     * @type {number}
     * @memberof NullableIntFieldUpdateOperationsInput
     */
    'increment'?: number;
    /**
     *
     * @type {number}
     * @memberof NullableIntFieldUpdateOperationsInput
     */
    'multiply'?: number;
    /**
     *
     * @type {number}
     * @memberof NullableIntFieldUpdateOperationsInput
     */
    'set'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof NullableIntFieldUpdateOperationsInput
     */
    'unset'?: boolean;
}
/**
 *
 * @export
 * @interface NullableStringFieldUpdateOperationsInput
 */
export interface NullableStringFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof NullableStringFieldUpdateOperationsInput
     */
    'set'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof NullableStringFieldUpdateOperationsInput
     */
    'unset'?: boolean;
}
/**
 *
 * @export
 * @interface Posts
 */
export interface Posts {
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    'body'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Posts
     */
    'dislikes'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    'id'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Posts
     */
    'likes'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof Posts
     */
    'user'?: string;
}
/**
 *
 * @export
 * @interface PostsAggregateInput
 */
export interface PostsAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof PostsAggregateInput
     */
    '_count'?: Array<PostsAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsAggregateInput
     */
    '_max'?: Array<PostsAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsAggregateInput
     */
    '_min'?: Array<PostsAggregateInputMinEnum>;
}
export declare const PostsAggregateInputCountEnum: {
    readonly All: "_all";
    readonly Body: "body";
    readonly Dislikes: "dislikes";
    readonly Id: "id";
    readonly Likes: "likes";
    readonly Title: "title";
    readonly User: "user";
};
export type PostsAggregateInputCountEnum = typeof PostsAggregateInputCountEnum[keyof typeof PostsAggregateInputCountEnum];
export declare const PostsAggregateInputMaxEnum: {
    readonly Body: "body";
    readonly Dislikes: "dislikes";
    readonly Id: "id";
    readonly Likes: "likes";
    readonly Title: "title";
    readonly User: "user";
};
export type PostsAggregateInputMaxEnum = typeof PostsAggregateInputMaxEnum[keyof typeof PostsAggregateInputMaxEnum];
export declare const PostsAggregateInputMinEnum: {
    readonly Body: "body";
    readonly Dislikes: "dislikes";
    readonly Id: "id";
    readonly Likes: "likes";
    readonly Title: "title";
    readonly User: "user";
};
export type PostsAggregateInputMinEnum = typeof PostsAggregateInputMinEnum[keyof typeof PostsAggregateInputMinEnum];
/**
 *
 * @export
 * @interface PostsCountAggregateOutputType
 */
export interface PostsCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof PostsCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof PostsCountAggregateOutputType
     */
    'body'?: number;
    /**
     *
     * @type {number}
     * @memberof PostsCountAggregateOutputType
     */
    'dislikes'?: number;
    /**
     *
     * @type {number}
     * @memberof PostsCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof PostsCountAggregateOutputType
     */
    'likes'?: number;
    /**
     *
     * @type {number}
     * @memberof PostsCountAggregateOutputType
     */
    'title'?: number;
    /**
     *
     * @type {number}
     * @memberof PostsCountAggregateOutputType
     */
    'user'?: number;
}
/**
 *
 * @export
 * @interface PostsCountOrderByAggregateInput
 */
export interface PostsCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof PostsCountOrderByAggregateInput
     */
    'body'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsCountOrderByAggregateInput
     */
    'dislikes'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsCountOrderByAggregateInput
     */
    'likes'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsCountOrderByAggregateInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsCountOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface PostsCreateInput
 */
export interface PostsCreateInput {
    /**
     *
     * @type {string}
     * @memberof PostsCreateInput
     */
    'body': string;
    /**
     *
     * @type {PostsCreateInputDislikes}
     * @memberof PostsCreateInput
     */
    'dislikes'?: PostsCreateInputDislikes;
    /**
     *
     * @type {string}
     * @memberof PostsCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {PostsCreateInputLikes}
     * @memberof PostsCreateInput
     */
    'likes'?: PostsCreateInputLikes;
    /**
     *
     * @type {string}
     * @memberof PostsCreateInput
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PostsCreateInput
     */
    'user': string;
}
/**
 * @type PostsCreateInputDislikes
 * @export
 */
export type PostsCreateInputDislikes = Array<string> | PostsCreatedislikesInput;
/**
 * @type PostsCreateInputLikes
 * @export
 */
export type PostsCreateInputLikes = Array<string> | PostsCreatelikesInput;
/**
 *
 * @export
 * @interface PostsCreateManyInput
 */
export interface PostsCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof PostsCreateManyInput
     */
    'body': string;
    /**
     *
     * @type {PostsCreateInputDislikes}
     * @memberof PostsCreateManyInput
     */
    'dislikes'?: PostsCreateInputDislikes;
    /**
     *
     * @type {string}
     * @memberof PostsCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {PostsCreateInputLikes}
     * @memberof PostsCreateManyInput
     */
    'likes'?: PostsCreateInputLikes;
    /**
     *
     * @type {string}
     * @memberof PostsCreateManyInput
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof PostsCreateManyInput
     */
    'user': string;
}
/**
 *
 * @export
 * @interface PostsCreatedislikesInput
 */
export interface PostsCreatedislikesInput {
    /**
     *
     * @type {Array<string>}
     * @memberof PostsCreatedislikesInput
     */
    'set': Array<string>;
}
/**
 *
 * @export
 * @interface PostsCreatelikesInput
 */
export interface PostsCreatelikesInput {
    /**
     *
     * @type {Array<string>}
     * @memberof PostsCreatelikesInput
     */
    'set': Array<string>;
}
/**
 *
 * @export
 * @interface PostsGroupByInput
 */
export interface PostsGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof PostsGroupByInput
     */
    '_count'?: Array<PostsGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsGroupByInput
     */
    '_max'?: Array<PostsGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsGroupByInput
     */
    '_min'?: Array<PostsGroupByInputMinEnum>;
    /**
     *
     * @type {boolean}
     * @memberof PostsGroupByInput
     */
    'body'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsGroupByInput
     */
    'dislikes'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsGroupByInput
     */
    'likes'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsGroupByInput
     */
    'title'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsGroupByInput
     */
    'user'?: boolean;
}
export declare const PostsGroupByInputCountEnum: {
    readonly All: "_all";
    readonly Body: "body";
    readonly Dislikes: "dislikes";
    readonly Id: "id";
    readonly Likes: "likes";
    readonly Title: "title";
    readonly User: "user";
};
export type PostsGroupByInputCountEnum = typeof PostsGroupByInputCountEnum[keyof typeof PostsGroupByInputCountEnum];
export declare const PostsGroupByInputMaxEnum: {
    readonly Body: "body";
    readonly Dislikes: "dislikes";
    readonly Id: "id";
    readonly Likes: "likes";
    readonly Title: "title";
    readonly User: "user";
};
export type PostsGroupByInputMaxEnum = typeof PostsGroupByInputMaxEnum[keyof typeof PostsGroupByInputMaxEnum];
export declare const PostsGroupByInputMinEnum: {
    readonly Body: "body";
    readonly Dislikes: "dislikes";
    readonly Id: "id";
    readonly Likes: "likes";
    readonly Title: "title";
    readonly User: "user";
};
export type PostsGroupByInputMinEnum = typeof PostsGroupByInputMinEnum[keyof typeof PostsGroupByInputMinEnum];
/**
 *
 * @export
 * @interface PostsGroupByOutputType
 */
export interface PostsGroupByOutputType {
    /**
     *
     * @type {PostsCountAggregateOutputType}
     * @memberof PostsGroupByOutputType
     */
    '_count'?: PostsCountAggregateOutputType;
    /**
     *
     * @type {PostsMaxAggregateOutputType}
     * @memberof PostsGroupByOutputType
     */
    '_max'?: PostsMaxAggregateOutputType;
    /**
     *
     * @type {PostsMinAggregateOutputType}
     * @memberof PostsGroupByOutputType
     */
    '_min'?: PostsMinAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof PostsGroupByOutputType
     */
    'body'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsGroupByOutputType
     */
    'dislikes'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PostsGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsGroupByOutputType
     */
    'likes'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof PostsGroupByOutputType
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof PostsGroupByOutputType
     */
    'user'?: string;
}
/**
 *
 * @export
 * @interface PostsMaxAggregateOutputType
 */
export interface PostsMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof PostsMaxAggregateOutputType
     */
    'body'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsMaxAggregateOutputType
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsMaxAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface PostsMaxOrderByAggregateInput
 */
export interface PostsMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMaxOrderByAggregateInput
     */
    'body'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMaxOrderByAggregateInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMaxOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface PostsMinAggregateOutputType
 */
export interface PostsMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof PostsMinAggregateOutputType
     */
    'body'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsMinAggregateOutputType
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PostsMinAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface PostsMinOrderByAggregateInput
 */
export interface PostsMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMinOrderByAggregateInput
     */
    'body'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMinOrderByAggregateInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsMinOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface PostsOrderByWithAggregationInput
 */
export interface PostsOrderByWithAggregationInput {
    /**
     *
     * @type {PostsCountOrderByAggregateInput}
     * @memberof PostsOrderByWithAggregationInput
     */
    '_count'?: PostsCountOrderByAggregateInput;
    /**
     *
     * @type {PostsMaxOrderByAggregateInput}
     * @memberof PostsOrderByWithAggregationInput
     */
    '_max'?: PostsMaxOrderByAggregateInput;
    /**
     *
     * @type {PostsMinOrderByAggregateInput}
     * @memberof PostsOrderByWithAggregationInput
     */
    '_min'?: PostsMinOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithAggregationInput
     */
    'body'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithAggregationInput
     */
    'dislikes'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithAggregationInput
     */
    'likes'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithAggregationInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithAggregationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface PostsOrderByWithRelationInput
 */
export interface PostsOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithRelationInput
     */
    'body'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithRelationInput
     */
    'dislikes'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithRelationInput
     */
    'likes'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithRelationInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof PostsOrderByWithRelationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const PostsScalarFieldEnum: {
    readonly Body: "body";
    readonly Dislikes: "dislikes";
    readonly Id: "id";
    readonly Likes: "likes";
    readonly Title: "title";
    readonly User: "user";
};
export type PostsScalarFieldEnum = typeof PostsScalarFieldEnum[keyof typeof PostsScalarFieldEnum];
/**
 *
 * @export
 * @interface PostsScalarWhereWithAggregatesInput
 */
export interface PostsScalarWhereWithAggregatesInput {
    /**
     *
     * @type {PostsScalarWhereWithAggregatesInputAND}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'AND'?: PostsScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {PostsScalarWhereWithAggregatesInputAND}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'NOT'?: PostsScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<PostsScalarWhereWithAggregatesInput>}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'OR'?: Array<PostsScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'body'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'dislikes'?: StringNullableListFilter;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'id'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'likes'?: StringNullableListFilter;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'title'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof PostsScalarWhereWithAggregatesInput
     */
    'user'?: DislikesScalarWhereWithAggregatesInputId;
}
/**
 * @type PostsScalarWhereWithAggregatesInputAND
 * @export
 */
export type PostsScalarWhereWithAggregatesInputAND = Array<PostsScalarWhereWithAggregatesInput> | PostsScalarWhereWithAggregatesInput;
/**
 *
 * @export
 * @interface PostsSelectInput
 */
export interface PostsSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    'body'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    'dislikes'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    'likes'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    'title'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PostsSelectInput
     */
    'user'?: boolean;
}
/**
 *
 * @export
 * @interface PostsUpdateInput
 */
export interface PostsUpdateInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof PostsUpdateInput
     */
    'body'?: DislikesUpdateInputPost;
    /**
     *
     * @type {PostsUpdateInputDislikes}
     * @memberof PostsUpdateInput
     */
    'dislikes'?: PostsUpdateInputDislikes;
    /**
     *
     * @type {PostsUpdateInputLikes}
     * @memberof PostsUpdateInput
     */
    'likes'?: PostsUpdateInputLikes;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof PostsUpdateInput
     */
    'title'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof PostsUpdateInput
     */
    'user'?: DislikesUpdateInputPost;
}
/**
 * @type PostsUpdateInputDislikes
 * @export
 */
export type PostsUpdateInputDislikes = Array<string> | PostsUpdatedislikesInput;
/**
 * @type PostsUpdateInputLikes
 * @export
 */
export type PostsUpdateInputLikes = Array<string> | PostsUpdatelikesInput;
/**
 *
 * @export
 * @interface PostsUpdateManyInput
 */
export interface PostsUpdateManyInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof PostsUpdateManyInput
     */
    'body'?: DislikesUpdateInputPost;
    /**
     *
     * @type {PostsUpdateInputDislikes}
     * @memberof PostsUpdateManyInput
     */
    'dislikes'?: PostsUpdateInputDislikes;
    /**
     *
     * @type {PostsUpdateInputLikes}
     * @memberof PostsUpdateManyInput
     */
    'likes'?: PostsUpdateInputLikes;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof PostsUpdateManyInput
     */
    'title'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof PostsUpdateManyInput
     */
    'user'?: DislikesUpdateInputPost;
}
/**
 *
 * @export
 * @interface PostsUpdatedislikesInput
 */
export interface PostsUpdatedislikesInput {
    /**
     *
     * @type {PostsUpdatedislikesInputPush}
     * @memberof PostsUpdatedislikesInput
     */
    'push'?: PostsUpdatedislikesInputPush;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsUpdatedislikesInput
     */
    'set'?: Array<string>;
}
/**
 * @type PostsUpdatedislikesInputPush
 * @export
 */
export type PostsUpdatedislikesInputPush = Array<string> | string;
/**
 *
 * @export
 * @interface PostsUpdatelikesInput
 */
export interface PostsUpdatelikesInput {
    /**
     *
     * @type {PostsUpdatedislikesInputPush}
     * @memberof PostsUpdatelikesInput
     */
    'push'?: PostsUpdatedislikesInputPush;
    /**
     *
     * @type {Array<string>}
     * @memberof PostsUpdatelikesInput
     */
    'set'?: Array<string>;
}
/**
 *
 * @export
 * @interface PostsWhereInput
 */
export interface PostsWhereInput {
    /**
     *
     * @type {PostsWhereInputAND}
     * @memberof PostsWhereInput
     */
    'AND'?: PostsWhereInputAND;
    /**
     *
     * @type {PostsWhereInputAND}
     * @memberof PostsWhereInput
     */
    'NOT'?: PostsWhereInputAND;
    /**
     *
     * @type {Array<PostsWhereInput>}
     * @memberof PostsWhereInput
     */
    'OR'?: Array<PostsWhereInput>;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof PostsWhereInput
     */
    'body'?: DislikesWhereInputId;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof PostsWhereInput
     */
    'dislikes'?: StringNullableListFilter;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof PostsWhereInput
     */
    'id'?: DislikesWhereInputId;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof PostsWhereInput
     */
    'likes'?: StringNullableListFilter;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof PostsWhereInput
     */
    'title'?: DislikesWhereInputId;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof PostsWhereInput
     */
    'user'?: DislikesWhereInputId;
}
/**
 * @type PostsWhereInputAND
 * @export
 */
export type PostsWhereInputAND = Array<PostsWhereInput> | PostsWhereInput;
/**
 *
 * @export
 * @interface PostsWhereUniqueInput
 */
export interface PostsWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof PostsWhereUniqueInput
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface Problems
 */
export interface Problems {
    /**
     *
     * @type {string}
     * @memberof Problems
     */
    'description'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Problems
     */
    'done'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof Problems
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof Problems
     */
    'id_'?: number | null;
    /**
     *
     * @type {any}
     * @memberof Problems
     */
    'links'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof Problems
     */
    'status'?: boolean | null;
    /**
     *
     * @type {any}
     * @memberof Problems
     */
    'tags'?: any | null;
    /**
     *
     * @type {string}
     * @memberof Problems
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof Problems
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface ProblemsAggregateInput
 */
export interface ProblemsAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsAggregateInput
     */
    '_avg'?: Array<ProblemsAggregateInputAvgEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsAggregateInput
     */
    '_count'?: Array<ProblemsAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsAggregateInput
     */
    '_max'?: Array<ProblemsAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsAggregateInput
     */
    '_min'?: Array<ProblemsAggregateInputMinEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsAggregateInput
     */
    '_sum'?: Array<ProblemsAggregateInputSumEnum>;
}
export declare const ProblemsAggregateInputAvgEnum: {
    readonly Id: "id_";
};
export type ProblemsAggregateInputAvgEnum = typeof ProblemsAggregateInputAvgEnum[keyof typeof ProblemsAggregateInputAvgEnum];
export declare const ProblemsAggregateInputCountEnum: {
    readonly All: "_all";
    readonly Description: "description";
    readonly Done: "done";
    readonly Id: "id";
    readonly Id2: "id_";
    readonly Links: "links";
    readonly Status: "status";
    readonly Tags: "tags";
    readonly Title: "title";
    readonly User: "user";
};
export type ProblemsAggregateInputCountEnum = typeof ProblemsAggregateInputCountEnum[keyof typeof ProblemsAggregateInputCountEnum];
export declare const ProblemsAggregateInputMaxEnum: {
    readonly Description: "description";
    readonly Done: "done";
    readonly Id: "id";
    readonly Id2: "id_";
    readonly Links: "links";
    readonly Status: "status";
    readonly Tags: "tags";
    readonly Title: "title";
    readonly User: "user";
};
export type ProblemsAggregateInputMaxEnum = typeof ProblemsAggregateInputMaxEnum[keyof typeof ProblemsAggregateInputMaxEnum];
export declare const ProblemsAggregateInputMinEnum: {
    readonly Description: "description";
    readonly Done: "done";
    readonly Id: "id";
    readonly Id2: "id_";
    readonly Links: "links";
    readonly Status: "status";
    readonly Tags: "tags";
    readonly Title: "title";
    readonly User: "user";
};
export type ProblemsAggregateInputMinEnum = typeof ProblemsAggregateInputMinEnum[keyof typeof ProblemsAggregateInputMinEnum];
export declare const ProblemsAggregateInputSumEnum: {
    readonly Id: "id_";
};
export type ProblemsAggregateInputSumEnum = typeof ProblemsAggregateInputSumEnum[keyof typeof ProblemsAggregateInputSumEnum];
/**
 *
 * @export
 * @interface ProblemsAvgAggregateOutputType
 */
export interface ProblemsAvgAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof ProblemsAvgAggregateOutputType
     */
    'id_'?: number | null;
}
/**
 *
 * @export
 * @interface ProblemsAvgOrderByAggregateInput
 */
export interface ProblemsAvgOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsAvgOrderByAggregateInput
     */
    'id_'?: SortOrder;
}
/**
 *
 * @export
 * @interface ProblemsCountAggregateOutputType
 */
export interface ProblemsCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'description'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'done'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'id_'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'links'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'status'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'tags'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'title'?: number;
    /**
     *
     * @type {number}
     * @memberof ProblemsCountAggregateOutputType
     */
    'user'?: number;
}
/**
 *
 * @export
 * @interface ProblemsCountOrderByAggregateInput
 */
export interface ProblemsCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'description'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'done'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'id_'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'links'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'status'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'tags'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsCountOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface ProblemsCreateInput
 */
export interface ProblemsCreateInput {
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateInput
     */
    'description': string;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsCreateInput
     */
    'done'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ProblemsCreateInput
     */
    'id_'?: number | null;
    /**
     *
     * @type {any}
     * @memberof ProblemsCreateInput
     */
    'links'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsCreateInput
     */
    'status'?: boolean | null;
    /**
     *
     * @type {any}
     * @memberof ProblemsCreateInput
     */
    'tags'?: any | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateInput
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateInput
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface ProblemsCreateManyInput
 */
export interface ProblemsCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateManyInput
     */
    'description': string;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsCreateManyInput
     */
    'done'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ProblemsCreateManyInput
     */
    'id_'?: number | null;
    /**
     *
     * @type {any}
     * @memberof ProblemsCreateManyInput
     */
    'links'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsCreateManyInput
     */
    'status'?: boolean | null;
    /**
     *
     * @type {any}
     * @memberof ProblemsCreateManyInput
     */
    'tags'?: any | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateManyInput
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof ProblemsCreateManyInput
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface ProblemsGroupByInput
 */
export interface ProblemsGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsGroupByInput
     */
    '_avg'?: Array<ProblemsGroupByInputAvgEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsGroupByInput
     */
    '_count'?: Array<ProblemsGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsGroupByInput
     */
    '_max'?: Array<ProblemsGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsGroupByInput
     */
    '_min'?: Array<ProblemsGroupByInputMinEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof ProblemsGroupByInput
     */
    '_sum'?: Array<ProblemsGroupByInputSumEnum>;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'description'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'done'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'id_'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'links'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'status'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'tags'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'title'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByInput
     */
    'user'?: boolean;
}
export declare const ProblemsGroupByInputAvgEnum: {
    readonly Id: "id_";
};
export type ProblemsGroupByInputAvgEnum = typeof ProblemsGroupByInputAvgEnum[keyof typeof ProblemsGroupByInputAvgEnum];
export declare const ProblemsGroupByInputCountEnum: {
    readonly All: "_all";
    readonly Description: "description";
    readonly Done: "done";
    readonly Id: "id";
    readonly Id2: "id_";
    readonly Links: "links";
    readonly Status: "status";
    readonly Tags: "tags";
    readonly Title: "title";
    readonly User: "user";
};
export type ProblemsGroupByInputCountEnum = typeof ProblemsGroupByInputCountEnum[keyof typeof ProblemsGroupByInputCountEnum];
export declare const ProblemsGroupByInputMaxEnum: {
    readonly Description: "description";
    readonly Done: "done";
    readonly Id: "id";
    readonly Id2: "id_";
    readonly Links: "links";
    readonly Status: "status";
    readonly Tags: "tags";
    readonly Title: "title";
    readonly User: "user";
};
export type ProblemsGroupByInputMaxEnum = typeof ProblemsGroupByInputMaxEnum[keyof typeof ProblemsGroupByInputMaxEnum];
export declare const ProblemsGroupByInputMinEnum: {
    readonly Description: "description";
    readonly Done: "done";
    readonly Id: "id";
    readonly Id2: "id_";
    readonly Links: "links";
    readonly Status: "status";
    readonly Tags: "tags";
    readonly Title: "title";
    readonly User: "user";
};
export type ProblemsGroupByInputMinEnum = typeof ProblemsGroupByInputMinEnum[keyof typeof ProblemsGroupByInputMinEnum];
export declare const ProblemsGroupByInputSumEnum: {
    readonly Id: "id_";
};
export type ProblemsGroupByInputSumEnum = typeof ProblemsGroupByInputSumEnum[keyof typeof ProblemsGroupByInputSumEnum];
/**
 *
 * @export
 * @interface ProblemsGroupByOutputType
 */
export interface ProblemsGroupByOutputType {
    /**
     *
     * @type {ProblemsAvgAggregateOutputType}
     * @memberof ProblemsGroupByOutputType
     */
    '_avg'?: ProblemsAvgAggregateOutputType;
    /**
     *
     * @type {ProblemsCountAggregateOutputType}
     * @memberof ProblemsGroupByOutputType
     */
    '_count'?: ProblemsCountAggregateOutputType;
    /**
     *
     * @type {ProblemsMaxAggregateOutputType}
     * @memberof ProblemsGroupByOutputType
     */
    '_max'?: ProblemsMaxAggregateOutputType;
    /**
     *
     * @type {ProblemsMinAggregateOutputType}
     * @memberof ProblemsGroupByOutputType
     */
    '_min'?: ProblemsMinAggregateOutputType;
    /**
     *
     * @type {ProblemsSumAggregateOutputType}
     * @memberof ProblemsGroupByOutputType
     */
    '_sum'?: ProblemsSumAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof ProblemsGroupByOutputType
     */
    'description'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByOutputType
     */
    'done'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ProblemsGroupByOutputType
     */
    'id_'?: number | null;
    /**
     *
     * @type {any}
     * @memberof ProblemsGroupByOutputType
     */
    'links'?: any | null;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsGroupByOutputType
     */
    'status'?: boolean | null;
    /**
     *
     * @type {any}
     * @memberof ProblemsGroupByOutputType
     */
    'tags'?: any | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsGroupByOutputType
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof ProblemsGroupByOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface ProblemsMaxAggregateOutputType
 */
export interface ProblemsMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof ProblemsMaxAggregateOutputType
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsMaxAggregateOutputType
     */
    'done'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {number}
     * @memberof ProblemsMaxAggregateOutputType
     */
    'id_'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsMaxAggregateOutputType
     */
    'status'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsMaxAggregateOutputType
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsMaxAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface ProblemsMaxOrderByAggregateInput
 */
export interface ProblemsMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMaxOrderByAggregateInput
     */
    'description'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMaxOrderByAggregateInput
     */
    'done'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMaxOrderByAggregateInput
     */
    'id_'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMaxOrderByAggregateInput
     */
    'status'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMaxOrderByAggregateInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMaxOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface ProblemsMinAggregateOutputType
 */
export interface ProblemsMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof ProblemsMinAggregateOutputType
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsMinAggregateOutputType
     */
    'done'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {number}
     * @memberof ProblemsMinAggregateOutputType
     */
    'id_'?: number | null;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsMinAggregateOutputType
     */
    'status'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsMinAggregateOutputType
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProblemsMinAggregateOutputType
     */
    'user'?: string | null;
}
/**
 *
 * @export
 * @interface ProblemsMinOrderByAggregateInput
 */
export interface ProblemsMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMinOrderByAggregateInput
     */
    'description'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMinOrderByAggregateInput
     */
    'done'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMinOrderByAggregateInput
     */
    'id_'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMinOrderByAggregateInput
     */
    'status'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMinOrderByAggregateInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsMinOrderByAggregateInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface ProblemsOrderByWithAggregationInput
 */
export interface ProblemsOrderByWithAggregationInput {
    /**
     *
     * @type {ProblemsAvgOrderByAggregateInput}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    '_avg'?: ProblemsAvgOrderByAggregateInput;
    /**
     *
     * @type {ProblemsCountOrderByAggregateInput}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    '_count'?: ProblemsCountOrderByAggregateInput;
    /**
     *
     * @type {ProblemsMaxOrderByAggregateInput}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    '_max'?: ProblemsMaxOrderByAggregateInput;
    /**
     *
     * @type {ProblemsMinOrderByAggregateInput}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    '_min'?: ProblemsMinOrderByAggregateInput;
    /**
     *
     * @type {ProblemsSumOrderByAggregateInput}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    '_sum'?: ProblemsSumOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'description'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'done'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'id_'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'links'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'status'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'tags'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithAggregationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @interface ProblemsOrderByWithRelationInput
 */
export interface ProblemsOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'description'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'done'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'id_'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'links'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'status'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'tags'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'title'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsOrderByWithRelationInput
     */
    'user'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ProblemsScalarFieldEnum: {
    readonly Description: "description";
    readonly Done: "done";
    readonly Id: "id";
    readonly Id2: "id_";
    readonly Links: "links";
    readonly Status: "status";
    readonly Tags: "tags";
    readonly Title: "title";
    readonly User: "user";
};
export type ProblemsScalarFieldEnum = typeof ProblemsScalarFieldEnum[keyof typeof ProblemsScalarFieldEnum];
/**
 *
 * @export
 * @interface ProblemsScalarWhereWithAggregatesInput
 */
export interface ProblemsScalarWhereWithAggregatesInput {
    /**
     *
     * @type {ProblemsScalarWhereWithAggregatesInputAND}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'AND'?: ProblemsScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {ProblemsScalarWhereWithAggregatesInputAND}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'NOT'?: ProblemsScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<ProblemsScalarWhereWithAggregatesInput>}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'OR'?: Array<ProblemsScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'description'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {ProblemsScalarWhereWithAggregatesInputDone}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'done'?: ProblemsScalarWhereWithAggregatesInputDone | null;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'id'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {ProblemsScalarWhereWithAggregatesInputId}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'id_'?: ProblemsScalarWhereWithAggregatesInputId | null;
    /**
     *
     * @type {JsonNullableWithAggregatesFilter}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'links'?: JsonNullableWithAggregatesFilter;
    /**
     *
     * @type {ProblemsScalarWhereWithAggregatesInputDone}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'status'?: ProblemsScalarWhereWithAggregatesInputDone | null;
    /**
     *
     * @type {JsonNullableWithAggregatesFilter}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'tags'?: JsonNullableWithAggregatesFilter;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'title'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {ProblemsScalarWhereWithAggregatesInputUser}
     * @memberof ProblemsScalarWhereWithAggregatesInput
     */
    'user'?: ProblemsScalarWhereWithAggregatesInputUser | null;
}
/**
 * @type ProblemsScalarWhereWithAggregatesInputAND
 * @export
 */
export type ProblemsScalarWhereWithAggregatesInputAND = Array<ProblemsScalarWhereWithAggregatesInput> | ProblemsScalarWhereWithAggregatesInput;
/**
 * @type ProblemsScalarWhereWithAggregatesInputDone
 * @export
 */
export type ProblemsScalarWhereWithAggregatesInputDone = BoolNullableWithAggregatesFilter | boolean;
/**
 * @type ProblemsScalarWhereWithAggregatesInputId
 * @export
 */
export type ProblemsScalarWhereWithAggregatesInputId = IntNullableWithAggregatesFilter | number;
/**
 * @type ProblemsScalarWhereWithAggregatesInputUser
 * @export
 */
export type ProblemsScalarWhereWithAggregatesInputUser = StringNullableWithAggregatesFilter | string;
/**
 *
 * @export
 * @interface ProblemsSelectInput
 */
export interface ProblemsSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'description'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'done'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'id_'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'links'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'status'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'tags'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'title'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProblemsSelectInput
     */
    'user'?: boolean;
}
/**
 *
 * @export
 * @interface ProblemsSumAggregateOutputType
 */
export interface ProblemsSumAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof ProblemsSumAggregateOutputType
     */
    'id_'?: number | null;
}
/**
 *
 * @export
 * @interface ProblemsSumOrderByAggregateInput
 */
export interface ProblemsSumOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof ProblemsSumOrderByAggregateInput
     */
    'id_'?: SortOrder;
}
/**
 *
 * @export
 * @interface ProblemsUpdateInput
 */
export interface ProblemsUpdateInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof ProblemsUpdateInput
     */
    'description'?: DislikesUpdateInputPost;
    /**
     *
     * @type {ProblemsUpdateInputDone}
     * @memberof ProblemsUpdateInput
     */
    'done'?: ProblemsUpdateInputDone | null;
    /**
     *
     * @type {ProblemsUpdateInputId}
     * @memberof ProblemsUpdateInput
     */
    'id_'?: ProblemsUpdateInputId | null;
    /**
     *
     * @type {}
     * @memberof ProblemsUpdateInput
     */
    'links'?: null;
    /**
     *
     * @type {ProblemsUpdateInputDone}
     * @memberof ProblemsUpdateInput
     */
    'status'?: ProblemsUpdateInputDone | null;
    /**
     *
     * @type {}
     * @memberof ProblemsUpdateInput
     */
    'tags'?: null;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof ProblemsUpdateInput
     */
    'title'?: DislikesUpdateInputPost;
    /**
     *
     * @type {ProblemsUpdateInputUser}
     * @memberof ProblemsUpdateInput
     */
    'user'?: ProblemsUpdateInputUser | null;
}
/**
 * @type ProblemsUpdateInputDone
 * @export
 */
export type ProblemsUpdateInputDone = NullableBoolFieldUpdateOperationsInput | boolean;
/**
 * @type ProblemsUpdateInputId
 * @export
 */
export type ProblemsUpdateInputId = NullableIntFieldUpdateOperationsInput | number;
/**
 * @type ProblemsUpdateInputUser
 * @export
 */
export type ProblemsUpdateInputUser = NullableStringFieldUpdateOperationsInput | string;
/**
 *
 * @export
 * @interface ProblemsUpdateManyInput
 */
export interface ProblemsUpdateManyInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof ProblemsUpdateManyInput
     */
    'description'?: DislikesUpdateInputPost;
    /**
     *
     * @type {ProblemsUpdateInputDone}
     * @memberof ProblemsUpdateManyInput
     */
    'done'?: ProblemsUpdateInputDone | null;
    /**
     *
     * @type {ProblemsUpdateInputId}
     * @memberof ProblemsUpdateManyInput
     */
    'id_'?: ProblemsUpdateInputId | null;
    /**
     *
     * @type {}
     * @memberof ProblemsUpdateManyInput
     */
    'links'?: null;
    /**
     *
     * @type {ProblemsUpdateInputDone}
     * @memberof ProblemsUpdateManyInput
     */
    'status'?: ProblemsUpdateInputDone | null;
    /**
     *
     * @type {}
     * @memberof ProblemsUpdateManyInput
     */
    'tags'?: null;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof ProblemsUpdateManyInput
     */
    'title'?: DislikesUpdateInputPost;
    /**
     *
     * @type {ProblemsUpdateInputUser}
     * @memberof ProblemsUpdateManyInput
     */
    'user'?: ProblemsUpdateInputUser | null;
}
/**
 *
 * @export
 * @interface ProblemsWhereInput
 */
export interface ProblemsWhereInput {
    /**
     *
     * @type {ProblemsWhereInputAND}
     * @memberof ProblemsWhereInput
     */
    'AND'?: ProblemsWhereInputAND;
    /**
     *
     * @type {ProblemsWhereInputAND}
     * @memberof ProblemsWhereInput
     */
    'NOT'?: ProblemsWhereInputAND;
    /**
     *
     * @type {Array<ProblemsWhereInput>}
     * @memberof ProblemsWhereInput
     */
    'OR'?: Array<ProblemsWhereInput>;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof ProblemsWhereInput
     */
    'description'?: DislikesWhereInputId;
    /**
     *
     * @type {ProblemsWhereInputDone}
     * @memberof ProblemsWhereInput
     */
    'done'?: ProblemsWhereInputDone | null;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof ProblemsWhereInput
     */
    'id'?: DislikesWhereInputId;
    /**
     *
     * @type {ProblemsWhereInputId}
     * @memberof ProblemsWhereInput
     */
    'id_'?: ProblemsWhereInputId | null;
    /**
     *
     * @type {JsonNullableFilter}
     * @memberof ProblemsWhereInput
     */
    'links'?: JsonNullableFilter;
    /**
     *
     * @type {ProblemsWhereInputDone}
     * @memberof ProblemsWhereInput
     */
    'status'?: ProblemsWhereInputDone | null;
    /**
     *
     * @type {JsonNullableFilter}
     * @memberof ProblemsWhereInput
     */
    'tags'?: JsonNullableFilter;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof ProblemsWhereInput
     */
    'title'?: DislikesWhereInputId;
    /**
     *
     * @type {ProblemsWhereInputUser}
     * @memberof ProblemsWhereInput
     */
    'user'?: ProblemsWhereInputUser | null;
}
/**
 * @type ProblemsWhereInputAND
 * @export
 */
export type ProblemsWhereInputAND = Array<ProblemsWhereInput> | ProblemsWhereInput;
/**
 * @type ProblemsWhereInputDone
 * @export
 */
export type ProblemsWhereInputDone = BoolNullableFilter | boolean;
/**
 * @type ProblemsWhereInputId
 * @export
 */
export type ProblemsWhereInputId = IntNullableFilter | number;
/**
 * @type ProblemsWhereInputUser
 * @export
 */
export type ProblemsWhereInputUser = StringNullableFilter | string;
/**
 *
 * @export
 * @interface ProblemsWhereUniqueInput
 */
export interface ProblemsWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof ProblemsWhereUniqueInput
     */
    'id'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const QueryMode: {
    readonly Default: "default";
    readonly Insensitive: "insensitive";
};
export type QueryMode = typeof QueryMode[keyof typeof QueryMode];
/**
 *
 * @export
 * @enum {string}
 */
export declare const SortOrder: {
    readonly Asc: "asc";
    readonly Desc: "desc";
};
export type SortOrder = typeof SortOrder[keyof typeof SortOrder];
/**
 *
 * @export
 * @interface StringFieldUpdateOperationsInput
 */
export interface StringFieldUpdateOperationsInput {
    /**
     *
     * @type {string}
     * @memberof StringFieldUpdateOperationsInput
     */
    'set'?: string;
}
/**
 *
 * @export
 * @interface StringFilter
 */
export interface StringFilter {
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringFilterNot}
     * @memberof StringFilter
     */
    'not'?: NestedStringFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface StringNullableFilter
 */
export interface StringNullableFilter {
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof StringNullableFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringNullableFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringNullableFilterNot}
     * @memberof StringNullableFilter
     */
    'not'?: NestedStringNullableFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringNullableFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface StringNullableListFilter
 */
export interface StringNullableListFilter {
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'eq'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'equals'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringNullableListFilter
     */
    'has'?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'hasEvery'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableListFilter
     */
    'hasSome'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof StringNullableListFilter
     */
    'isEmpty'?: boolean;
}
/**
 *
 * @export
 * @interface StringNullableWithAggregatesFilter
 */
export interface StringNullableWithAggregatesFilter {
    /**
     *
     * @type {NestedIntNullableFilter}
     * @memberof StringNullableWithAggregatesFilter
     */
    '_count'?: NestedIntNullableFilter;
    /**
     *
     * @type {NestedStringNullableFilter}
     * @memberof StringNullableWithAggregatesFilter
     */
    '_max'?: NestedStringNullableFilter;
    /**
     *
     * @type {NestedStringNullableFilter}
     * @memberof StringNullableWithAggregatesFilter
     */
    '_min'?: NestedStringNullableFilter;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'eq'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'equals'?: string | null;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof StringNullableWithAggregatesFilter
     */
    'isSet'?: boolean;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringNullableWithAggregatesFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringNullableWithAggregatesFilterNot}
     * @memberof StringNullableWithAggregatesFilter
     */
    'not'?: NestedStringNullableWithAggregatesFilterNot | null;
    /**
     *
     * @type {Array<string>}
     * @memberof StringNullableWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringNullableWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface StringWithAggregatesFilter
 */
export interface StringWithAggregatesFilter {
    /**
     *
     * @type {NestedIntFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_count'?: NestedIntFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_max'?: NestedStringFilter;
    /**
     *
     * @type {NestedStringFilter}
     * @memberof StringWithAggregatesFilter
     */
    '_min'?: NestedStringFilter;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'contains'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'endsWith'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'eq'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'equals'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'gte'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'in'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lt'?: string;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'lte'?: string;
    /**
     *
     * @type {QueryMode}
     * @memberof StringWithAggregatesFilter
     */
    'mode'?: QueryMode;
    /**
     *
     * @type {NestedStringWithAggregatesFilterNot}
     * @memberof StringWithAggregatesFilter
     */
    'not'?: NestedStringWithAggregatesFilterNot;
    /**
     *
     * @type {Array<string>}
     * @memberof StringWithAggregatesFilter
     */
    'notIn'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof StringWithAggregatesFilter
     */
    'startsWith'?: string;
}
/**
 *
 * @export
 * @interface Users
 */
export interface Users {
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'password'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Users
     */
    'problems'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Users
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface UsersAggregateInput
 */
export interface UsersAggregateInput {
    /**
     *
     * @type {Array<string>}
     * @memberof UsersAggregateInput
     */
    '_count'?: Array<UsersAggregateInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersAggregateInput
     */
    '_max'?: Array<UsersAggregateInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersAggregateInput
     */
    '_min'?: Array<UsersAggregateInputMinEnum>;
}
export declare const UsersAggregateInputCountEnum: {
    readonly All: "_all";
    readonly Email: "email";
    readonly Id: "id";
    readonly Password: "password";
    readonly Problems: "problems";
    readonly Username: "username";
};
export type UsersAggregateInputCountEnum = typeof UsersAggregateInputCountEnum[keyof typeof UsersAggregateInputCountEnum];
export declare const UsersAggregateInputMaxEnum: {
    readonly Email: "email";
    readonly Id: "id";
    readonly Password: "password";
    readonly Problems: "problems";
    readonly Username: "username";
};
export type UsersAggregateInputMaxEnum = typeof UsersAggregateInputMaxEnum[keyof typeof UsersAggregateInputMaxEnum];
export declare const UsersAggregateInputMinEnum: {
    readonly Email: "email";
    readonly Id: "id";
    readonly Password: "password";
    readonly Problems: "problems";
    readonly Username: "username";
};
export type UsersAggregateInputMinEnum = typeof UsersAggregateInputMinEnum[keyof typeof UsersAggregateInputMinEnum];
/**
 *
 * @export
 * @interface UsersCountAggregateOutputType
 */
export interface UsersCountAggregateOutputType {
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    '_all'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'email'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'id'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'password'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'problems'?: number;
    /**
     *
     * @type {number}
     * @memberof UsersCountAggregateOutputType
     */
    'username'?: number;
}
/**
 *
 * @export
 * @interface UsersCountOrderByAggregateInput
 */
export interface UsersCountOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'password'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'problems'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersCountOrderByAggregateInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersCreateInput
 */
export interface UsersCreateInput {
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'password': string;
    /**
     *
     * @type {UsersCreateInputProblems}
     * @memberof UsersCreateInput
     */
    'problems'?: UsersCreateInputProblems;
    /**
     *
     * @type {string}
     * @memberof UsersCreateInput
     */
    'username': string;
}
/**
 * @type UsersCreateInputProblems
 * @export
 */
export type UsersCreateInputProblems = Array<string> | UsersCreateproblemsInput;
/**
 *
 * @export
 * @interface UsersCreateManyInput
 */
export interface UsersCreateManyInput {
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'password': string;
    /**
     *
     * @type {UsersCreateInputProblems}
     * @memberof UsersCreateManyInput
     */
    'problems'?: UsersCreateInputProblems;
    /**
     *
     * @type {string}
     * @memberof UsersCreateManyInput
     */
    'username': string;
}
/**
 *
 * @export
 * @interface UsersCreateproblemsInput
 */
export interface UsersCreateproblemsInput {
    /**
     *
     * @type {Array<string>}
     * @memberof UsersCreateproblemsInput
     */
    'set': Array<string>;
}
/**
 *
 * @export
 * @interface UsersGroupByInput
 */
export interface UsersGroupByInput {
    /**
     *
     * @type {Array<string>}
     * @memberof UsersGroupByInput
     */
    '_count'?: Array<UsersGroupByInputCountEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersGroupByInput
     */
    '_max'?: Array<UsersGroupByInputMaxEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersGroupByInput
     */
    '_min'?: Array<UsersGroupByInputMinEnum>;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'email'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'password'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'problems'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersGroupByInput
     */
    'username'?: boolean;
}
export declare const UsersGroupByInputCountEnum: {
    readonly All: "_all";
    readonly Email: "email";
    readonly Id: "id";
    readonly Password: "password";
    readonly Problems: "problems";
    readonly Username: "username";
};
export type UsersGroupByInputCountEnum = typeof UsersGroupByInputCountEnum[keyof typeof UsersGroupByInputCountEnum];
export declare const UsersGroupByInputMaxEnum: {
    readonly Email: "email";
    readonly Id: "id";
    readonly Password: "password";
    readonly Problems: "problems";
    readonly Username: "username";
};
export type UsersGroupByInputMaxEnum = typeof UsersGroupByInputMaxEnum[keyof typeof UsersGroupByInputMaxEnum];
export declare const UsersGroupByInputMinEnum: {
    readonly Email: "email";
    readonly Id: "id";
    readonly Password: "password";
    readonly Problems: "problems";
    readonly Username: "username";
};
export type UsersGroupByInputMinEnum = typeof UsersGroupByInputMinEnum[keyof typeof UsersGroupByInputMinEnum];
/**
 *
 * @export
 * @interface UsersGroupByOutputType
 */
export interface UsersGroupByOutputType {
    /**
     *
     * @type {UsersCountAggregateOutputType}
     * @memberof UsersGroupByOutputType
     */
    '_count'?: UsersCountAggregateOutputType;
    /**
     *
     * @type {UsersMaxAggregateOutputType}
     * @memberof UsersGroupByOutputType
     */
    '_max'?: UsersMaxAggregateOutputType;
    /**
     *
     * @type {UsersMinAggregateOutputType}
     * @memberof UsersGroupByOutputType
     */
    '_min'?: UsersMinAggregateOutputType;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'password'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersGroupByOutputType
     */
    'problems'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof UsersGroupByOutputType
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface UsersMaxAggregateOutputType
 */
export interface UsersMaxAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'password'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMaxAggregateOutputType
     */
    'username'?: string | null;
}
/**
 *
 * @export
 * @interface UsersMaxOrderByAggregateInput
 */
export interface UsersMaxOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'password'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMaxOrderByAggregateInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersMinAggregateOutputType
 */
export interface UsersMinAggregateOutputType {
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'email'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'password'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersMinAggregateOutputType
     */
    'username'?: string | null;
}
/**
 *
 * @export
 * @interface UsersMinOrderByAggregateInput
 */
export interface UsersMinOrderByAggregateInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'password'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersMinOrderByAggregateInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersOrderByWithAggregationInput
 */
export interface UsersOrderByWithAggregationInput {
    /**
     *
     * @type {UsersCountOrderByAggregateInput}
     * @memberof UsersOrderByWithAggregationInput
     */
    '_count'?: UsersCountOrderByAggregateInput;
    /**
     *
     * @type {UsersMaxOrderByAggregateInput}
     * @memberof UsersOrderByWithAggregationInput
     */
    '_max'?: UsersMaxOrderByAggregateInput;
    /**
     *
     * @type {UsersMinOrderByAggregateInput}
     * @memberof UsersOrderByWithAggregationInput
     */
    '_min'?: UsersMinOrderByAggregateInput;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'password'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'problems'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithAggregationInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @interface UsersOrderByWithRelationInput
 */
export interface UsersOrderByWithRelationInput {
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'email'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'id'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'password'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'problems'?: SortOrder;
    /**
     *
     * @type {SortOrder}
     * @memberof UsersOrderByWithRelationInput
     */
    'username'?: SortOrder;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const UsersScalarFieldEnum: {
    readonly Email: "email";
    readonly Id: "id";
    readonly Password: "password";
    readonly Problems: "problems";
    readonly Username: "username";
};
export type UsersScalarFieldEnum = typeof UsersScalarFieldEnum[keyof typeof UsersScalarFieldEnum];
/**
 *
 * @export
 * @interface UsersScalarWhereWithAggregatesInput
 */
export interface UsersScalarWhereWithAggregatesInput {
    /**
     *
     * @type {UsersScalarWhereWithAggregatesInputAND}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'AND'?: UsersScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {UsersScalarWhereWithAggregatesInputAND}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'NOT'?: UsersScalarWhereWithAggregatesInputAND;
    /**
     *
     * @type {Array<UsersScalarWhereWithAggregatesInput>}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'OR'?: Array<UsersScalarWhereWithAggregatesInput>;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'email'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'id'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'password'?: DislikesScalarWhereWithAggregatesInputId;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'problems'?: StringNullableListFilter;
    /**
     *
     * @type {DislikesScalarWhereWithAggregatesInputId}
     * @memberof UsersScalarWhereWithAggregatesInput
     */
    'username'?: DislikesScalarWhereWithAggregatesInputId;
}
/**
 * @type UsersScalarWhereWithAggregatesInputAND
 * @export
 */
export type UsersScalarWhereWithAggregatesInputAND = Array<UsersScalarWhereWithAggregatesInput> | UsersScalarWhereWithAggregatesInput;
/**
 *
 * @export
 * @interface UsersSelectInput
 */
export interface UsersSelectInput {
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    '$related'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    '$scalars'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'email'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'id'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'password'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'problems'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UsersSelectInput
     */
    'username'?: boolean;
}
/**
 *
 * @export
 * @interface UsersUpdateInput
 */
export interface UsersUpdateInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof UsersUpdateInput
     */
    'email'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof UsersUpdateInput
     */
    'password'?: DislikesUpdateInputPost;
    /**
     *
     * @type {UsersUpdateInputProblems}
     * @memberof UsersUpdateInput
     */
    'problems'?: UsersUpdateInputProblems;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof UsersUpdateInput
     */
    'username'?: DislikesUpdateInputPost;
}
/**
 * @type UsersUpdateInputProblems
 * @export
 */
export type UsersUpdateInputProblems = Array<string> | UsersUpdateproblemsInput;
/**
 *
 * @export
 * @interface UsersUpdateManyInput
 */
export interface UsersUpdateManyInput {
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof UsersUpdateManyInput
     */
    'email'?: DislikesUpdateInputPost;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof UsersUpdateManyInput
     */
    'password'?: DislikesUpdateInputPost;
    /**
     *
     * @type {UsersUpdateInputProblems}
     * @memberof UsersUpdateManyInput
     */
    'problems'?: UsersUpdateInputProblems;
    /**
     *
     * @type {DislikesUpdateInputPost}
     * @memberof UsersUpdateManyInput
     */
    'username'?: DislikesUpdateInputPost;
}
/**
 *
 * @export
 * @interface UsersUpdateproblemsInput
 */
export interface UsersUpdateproblemsInput {
    /**
     *
     * @type {PostsUpdatedislikesInputPush}
     * @memberof UsersUpdateproblemsInput
     */
    'push'?: PostsUpdatedislikesInputPush;
    /**
     *
     * @type {Array<string>}
     * @memberof UsersUpdateproblemsInput
     */
    'set'?: Array<string>;
}
/**
 *
 * @export
 * @interface UsersWhereInput
 */
export interface UsersWhereInput {
    /**
     *
     * @type {UsersWhereInputAND}
     * @memberof UsersWhereInput
     */
    'AND'?: UsersWhereInputAND;
    /**
     *
     * @type {UsersWhereInputAND}
     * @memberof UsersWhereInput
     */
    'NOT'?: UsersWhereInputAND;
    /**
     *
     * @type {Array<UsersWhereInput>}
     * @memberof UsersWhereInput
     */
    'OR'?: Array<UsersWhereInput>;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof UsersWhereInput
     */
    'email'?: DislikesWhereInputId;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof UsersWhereInput
     */
    'id'?: DislikesWhereInputId;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof UsersWhereInput
     */
    'password'?: DislikesWhereInputId;
    /**
     *
     * @type {StringNullableListFilter}
     * @memberof UsersWhereInput
     */
    'problems'?: StringNullableListFilter;
    /**
     *
     * @type {DislikesWhereInputId}
     * @memberof UsersWhereInput
     */
    'username'?: DislikesWhereInputId;
}
/**
 * @type UsersWhereInputAND
 * @export
 */
export type UsersWhereInputAND = Array<UsersWhereInput> | UsersWhereInput;
/**
 *
 * @export
 * @interface UsersWhereUniqueInput
 */
export interface UsersWhereUniqueInput {
    /**
     *
     * @type {string}
     * @memberof UsersWhereUniqueInput
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersWhereUniqueInput
     */
    'id'?: string;
}
/**
 * DislikesApi - axios parameter creator
 * @export
 */
export declare const DislikesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by dislikes
     * @param {DislikesAggregateInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByDislikes: (select: DislikesAggregateInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple dislikes records
     * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyDislikes: (dislikesCreateManyInput: Array<DislikesCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one dislikes record
     * @param {DislikesCreateInput} dislikesCreateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneDislikes: (dislikesCreateInput: DislikesCreateInput, select?: DislikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple dislikes records
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDislikes: (filter?: DislikesWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDislikesById: (value: string, select?: DislikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple dislikes records
     * @param {DislikesSelectInput} [select]
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDislikes: (select?: DislikesSelectInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDislikesById: (value: string, select?: DislikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by dislikes
     * @param {DislikesGroupByInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<DislikesScalarFieldEnum>} [groupBy]
     * @param {DislikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByDislikes: (select: DislikesGroupByInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithAggregationInput>, groupBy?: Array<DislikesScalarFieldEnum>, having?: DislikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple dislikes records
     * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDislikes: (dislikesUpdateManyInput: DislikesUpdateManyInput, filter?: DislikesWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one dislikes record by id
     * @param {string} value
     * @param {DislikesUpdateInput} dislikesUpdateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDislikesById: (value: string, dislikesUpdateInput: DislikesUpdateInput, select?: DislikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DislikesApi - functional programming interface
 * @export
 */
export declare const DislikesApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by dislikes
     * @param {DislikesAggregateInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByDislikes(select: DislikesAggregateInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByDislikes200Response>>;
    /**
     * Create multiple dislikes records
     * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyDislikes(dislikesCreateManyInput: Array<DislikesCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Create one dislikes record
     * @param {DislikesCreateInput} dislikesCreateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneDislikes(dislikesCreateInput: DislikesCreateInput, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneDislikes201Response>>;
    /**
     * Delete multiple dislikes records
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDislikes(filter?: DislikesWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Delete one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDislikesById(value: string, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneDislikes201Response>>;
    /**
     * Retrieve multiple dislikes records
     * @param {DislikesSelectInput} [select]
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDislikes(select?: DislikesSelectInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindDislikes200Response>>;
    /**
     * Find one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDislikesById(value: string, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneDislikes201Response>>;
    /**
     * Group by dislikes
     * @param {DislikesGroupByInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<DislikesScalarFieldEnum>} [groupBy]
     * @param {DislikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByDislikes(select: DislikesGroupByInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithAggregationInput>, groupBy?: Array<DislikesScalarFieldEnum>, having?: DislikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByDislikes200Response>>;
    /**
     * Update multiple dislikes records
     * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDislikes(dislikesUpdateManyInput: DislikesUpdateManyInput, filter?: DislikesWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Update one dislikes record by id
     * @param {string} value
     * @param {DislikesUpdateInput} dislikesUpdateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDislikesById(value: string, dislikesUpdateInput: DislikesUpdateInput, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneDislikes201Response>>;
};
/**
 * DislikesApi - factory interface
 * @export
 */
export declare const DislikesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by dislikes
     * @param {DislikesAggregateInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByDislikes(select: DislikesAggregateInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByDislikes200Response>;
    /**
     * Create multiple dislikes records
     * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyDislikes(dislikesCreateManyInput: Array<DislikesCreateManyInput>, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Create one dislikes record
     * @param {DislikesCreateInput} dislikesCreateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneDislikes(dislikesCreateInput: DislikesCreateInput, select?: DislikesSelectInput, options?: any): AxiosPromise<CreateOneDislikes201Response>;
    /**
     * Delete multiple dislikes records
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDislikes(filter?: DislikesWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Delete one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDislikesById(value: string, select?: DislikesSelectInput, options?: any): AxiosPromise<CreateOneDislikes201Response>;
    /**
     * Retrieve multiple dislikes records
     * @param {DislikesSelectInput} [select]
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDislikes(select?: DislikesSelectInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindDislikes200Response>;
    /**
     * Find one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDislikesById(value: string, select?: DislikesSelectInput, options?: any): AxiosPromise<CreateOneDislikes201Response>;
    /**
     * Group by dislikes
     * @param {DislikesGroupByInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<DislikesScalarFieldEnum>} [groupBy]
     * @param {DislikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByDislikes(select: DislikesGroupByInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithAggregationInput>, groupBy?: Array<DislikesScalarFieldEnum>, having?: DislikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByDislikes200Response>;
    /**
     * Update multiple dislikes records
     * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDislikes(dislikesUpdateManyInput: DislikesUpdateManyInput, filter?: DislikesWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Update one dislikes record by id
     * @param {string} value
     * @param {DislikesUpdateInput} dislikesUpdateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateDislikesById(value: string, dislikesUpdateInput: DislikesUpdateInput, select?: DislikesSelectInput, options?: any): AxiosPromise<CreateOneDislikes201Response>;
};
/**
 * DislikesApi - object-oriented interface
 * @export
 * @class DislikesApi
 * @extends {BaseAPI}
 */
export declare class DislikesApi extends BaseAPI {
    /**
     * Aggregate by dislikes
     * @param {DislikesAggregateInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    aggregateByDislikes(select: DislikesAggregateInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByDislikes200Response, any>>;
    /**
     * Create multiple dislikes records
     * @param {Array<DislikesCreateManyInput>} dislikesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    createManyDislikes(dislikesCreateManyInput: Array<DislikesCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Create one dislikes record
     * @param {DislikesCreateInput} dislikesCreateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    createOneDislikes(dislikesCreateInput: DislikesCreateInput, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneDislikes201Response, any>>;
    /**
     * Delete multiple dislikes records
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    deleteDislikes(filter?: DislikesWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Delete one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    deleteDislikesById(value: string, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneDislikes201Response, any>>;
    /**
     * Retrieve multiple dislikes records
     * @param {DislikesSelectInput} [select]
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    findDislikes(select?: DislikesSelectInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindDislikes200Response, any>>;
    /**
     * Find one dislikes record by id
     * @param {string} value
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    findDislikesById(value: string, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneDislikes201Response, any>>;
    /**
     * Group by dislikes
     * @param {DislikesGroupByInput} select
     * @param {DislikesWhereInput} [filter]
     * @param {Array<DislikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<DislikesScalarFieldEnum>} [groupBy]
     * @param {DislikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    groupByDislikes(select: DislikesGroupByInput, filter?: DislikesWhereInput, orderBy?: Array<DislikesOrderByWithAggregationInput>, groupBy?: Array<DislikesScalarFieldEnum>, having?: DislikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByDislikes200Response, any>>;
    /**
     * Update multiple dislikes records
     * @param {DislikesUpdateManyInput} dislikesUpdateManyInput
     * @param {DislikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    updateDislikes(dislikesUpdateManyInput: DislikesUpdateManyInput, filter?: DislikesWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Update one dislikes record by id
     * @param {string} value
     * @param {DislikesUpdateInput} dislikesUpdateInput
     * @param {DislikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DislikesApi
     */
    updateDislikesById(value: string, dislikesUpdateInput: DislikesUpdateInput, select?: DislikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneDislikes201Response, any>>;
}
export declare const DislikesApiService: DislikesApi;
/**
 * LikesApi - axios parameter creator
 * @export
 */
export declare const LikesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by likes
     * @param {LikesAggregateInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByLikes: (select: LikesAggregateInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple likes records
     * @param {Array<LikesCreateManyInput>} likesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyLikes: (likesCreateManyInput: Array<LikesCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one likes record
     * @param {LikesCreateInput} likesCreateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneLikes: (likesCreateInput: LikesCreateInput, select?: LikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple likes records
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLikes: (filter?: LikesWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLikesById: (value: string, select?: LikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple likes records
     * @param {LikesSelectInput} [select]
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLikes: (select?: LikesSelectInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLikesById: (value: string, select?: LikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by likes
     * @param {LikesGroupByInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<LikesScalarFieldEnum>} [groupBy]
     * @param {LikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByLikes: (select: LikesGroupByInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithAggregationInput>, groupBy?: Array<LikesScalarFieldEnum>, having?: LikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple likes records
     * @param {LikesUpdateManyInput} likesUpdateManyInput
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLikes: (likesUpdateManyInput: LikesUpdateManyInput, filter?: LikesWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one likes record by id
     * @param {string} value
     * @param {LikesUpdateInput} likesUpdateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLikesById: (value: string, likesUpdateInput: LikesUpdateInput, select?: LikesSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LikesApi - functional programming interface
 * @export
 */
export declare const LikesApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by likes
     * @param {LikesAggregateInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByLikes(select: LikesAggregateInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByLikes200Response>>;
    /**
     * Create multiple likes records
     * @param {Array<LikesCreateManyInput>} likesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyLikes(likesCreateManyInput: Array<LikesCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Create one likes record
     * @param {LikesCreateInput} likesCreateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneLikes(likesCreateInput: LikesCreateInput, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneLikes201Response>>;
    /**
     * Delete multiple likes records
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLikes(filter?: LikesWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Delete one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLikesById(value: string, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneLikes201Response>>;
    /**
     * Retrieve multiple likes records
     * @param {LikesSelectInput} [select]
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLikes(select?: LikesSelectInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindLikes200Response>>;
    /**
     * Find one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLikesById(value: string, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneLikes201Response>>;
    /**
     * Group by likes
     * @param {LikesGroupByInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<LikesScalarFieldEnum>} [groupBy]
     * @param {LikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByLikes(select: LikesGroupByInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithAggregationInput>, groupBy?: Array<LikesScalarFieldEnum>, having?: LikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByLikes200Response>>;
    /**
     * Update multiple likes records
     * @param {LikesUpdateManyInput} likesUpdateManyInput
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLikes(likesUpdateManyInput: LikesUpdateManyInput, filter?: LikesWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Update one likes record by id
     * @param {string} value
     * @param {LikesUpdateInput} likesUpdateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLikesById(value: string, likesUpdateInput: LikesUpdateInput, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneLikes201Response>>;
};
/**
 * LikesApi - factory interface
 * @export
 */
export declare const LikesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by likes
     * @param {LikesAggregateInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByLikes(select: LikesAggregateInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByLikes200Response>;
    /**
     * Create multiple likes records
     * @param {Array<LikesCreateManyInput>} likesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyLikes(likesCreateManyInput: Array<LikesCreateManyInput>, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Create one likes record
     * @param {LikesCreateInput} likesCreateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneLikes(likesCreateInput: LikesCreateInput, select?: LikesSelectInput, options?: any): AxiosPromise<CreateOneLikes201Response>;
    /**
     * Delete multiple likes records
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLikes(filter?: LikesWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Delete one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLikesById(value: string, select?: LikesSelectInput, options?: any): AxiosPromise<CreateOneLikes201Response>;
    /**
     * Retrieve multiple likes records
     * @param {LikesSelectInput} [select]
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLikes(select?: LikesSelectInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindLikes200Response>;
    /**
     * Find one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findLikesById(value: string, select?: LikesSelectInput, options?: any): AxiosPromise<CreateOneLikes201Response>;
    /**
     * Group by likes
     * @param {LikesGroupByInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<LikesScalarFieldEnum>} [groupBy]
     * @param {LikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByLikes(select: LikesGroupByInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithAggregationInput>, groupBy?: Array<LikesScalarFieldEnum>, having?: LikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByLikes200Response>;
    /**
     * Update multiple likes records
     * @param {LikesUpdateManyInput} likesUpdateManyInput
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLikes(likesUpdateManyInput: LikesUpdateManyInput, filter?: LikesWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Update one likes record by id
     * @param {string} value
     * @param {LikesUpdateInput} likesUpdateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateLikesById(value: string, likesUpdateInput: LikesUpdateInput, select?: LikesSelectInput, options?: any): AxiosPromise<CreateOneLikes201Response>;
};
/**
 * LikesApi - object-oriented interface
 * @export
 * @class LikesApi
 * @extends {BaseAPI}
 */
export declare class LikesApi extends BaseAPI {
    /**
     * Aggregate by likes
     * @param {LikesAggregateInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    aggregateByLikes(select: LikesAggregateInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByLikes200Response, any>>;
    /**
     * Create multiple likes records
     * @param {Array<LikesCreateManyInput>} likesCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    createManyLikes(likesCreateManyInput: Array<LikesCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Create one likes record
     * @param {LikesCreateInput} likesCreateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    createOneLikes(likesCreateInput: LikesCreateInput, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneLikes201Response, any>>;
    /**
     * Delete multiple likes records
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    deleteLikes(filter?: LikesWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Delete one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    deleteLikesById(value: string, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneLikes201Response, any>>;
    /**
     * Retrieve multiple likes records
     * @param {LikesSelectInput} [select]
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    findLikes(select?: LikesSelectInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindLikes200Response, any>>;
    /**
     * Find one likes record by id
     * @param {string} value
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    findLikesById(value: string, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneLikes201Response, any>>;
    /**
     * Group by likes
     * @param {LikesGroupByInput} select
     * @param {LikesWhereInput} [filter]
     * @param {Array<LikesOrderByWithAggregationInput>} [orderBy]
     * @param {Array<LikesScalarFieldEnum>} [groupBy]
     * @param {LikesScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    groupByLikes(select: LikesGroupByInput, filter?: LikesWhereInput, orderBy?: Array<LikesOrderByWithAggregationInput>, groupBy?: Array<LikesScalarFieldEnum>, having?: LikesScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByLikes200Response, any>>;
    /**
     * Update multiple likes records
     * @param {LikesUpdateManyInput} likesUpdateManyInput
     * @param {LikesWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    updateLikes(likesUpdateManyInput: LikesUpdateManyInput, filter?: LikesWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Update one likes record by id
     * @param {string} value
     * @param {LikesUpdateInput} likesUpdateInput
     * @param {LikesSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikesApi
     */
    updateLikesById(value: string, likesUpdateInput: LikesUpdateInput, select?: LikesSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneLikes201Response, any>>;
}
export declare const LikesApiService: LikesApi;
/**
 * PostsApi - axios parameter creator
 * @export
 */
export declare const PostsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by posts
     * @param {PostsAggregateInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByPosts: (select: PostsAggregateInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple posts records
     * @param {Array<PostsCreateManyInput>} postsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyPosts: (postsCreateManyInput: Array<PostsCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one posts record
     * @param {PostsCreateInput} postsCreateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOnePosts: (postsCreateInput: PostsCreateInput, select?: PostsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple posts records
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePosts: (filter?: PostsWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostsById: (value: string, select?: PostsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple posts records
     * @param {PostsSelectInput} [select]
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPosts: (select?: PostsSelectInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPostsById: (value: string, select?: PostsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by posts
     * @param {PostsGroupByInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<PostsScalarFieldEnum>} [groupBy]
     * @param {PostsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByPosts: (select: PostsGroupByInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithAggregationInput>, groupBy?: Array<PostsScalarFieldEnum>, having?: PostsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple posts records
     * @param {PostsUpdateManyInput} postsUpdateManyInput
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePosts: (postsUpdateManyInput: PostsUpdateManyInput, filter?: PostsWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one posts record by id
     * @param {string} value
     * @param {PostsUpdateInput} postsUpdateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostsById: (value: string, postsUpdateInput: PostsUpdateInput, select?: PostsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PostsApi - functional programming interface
 * @export
 */
export declare const PostsApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by posts
     * @param {PostsAggregateInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByPosts(select: PostsAggregateInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByPosts200Response>>;
    /**
     * Create multiple posts records
     * @param {Array<PostsCreateManyInput>} postsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyPosts(postsCreateManyInput: Array<PostsCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Create one posts record
     * @param {PostsCreateInput} postsCreateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOnePosts(postsCreateInput: PostsCreateInput, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOnePosts201Response>>;
    /**
     * Delete multiple posts records
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePosts(filter?: PostsWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Delete one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostsById(value: string, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOnePosts201Response>>;
    /**
     * Retrieve multiple posts records
     * @param {PostsSelectInput} [select]
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPosts(select?: PostsSelectInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindPosts200Response>>;
    /**
     * Find one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPostsById(value: string, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOnePosts201Response>>;
    /**
     * Group by posts
     * @param {PostsGroupByInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<PostsScalarFieldEnum>} [groupBy]
     * @param {PostsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByPosts(select: PostsGroupByInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithAggregationInput>, groupBy?: Array<PostsScalarFieldEnum>, having?: PostsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByPosts200Response>>;
    /**
     * Update multiple posts records
     * @param {PostsUpdateManyInput} postsUpdateManyInput
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePosts(postsUpdateManyInput: PostsUpdateManyInput, filter?: PostsWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Update one posts record by id
     * @param {string} value
     * @param {PostsUpdateInput} postsUpdateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostsById(value: string, postsUpdateInput: PostsUpdateInput, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOnePosts201Response>>;
};
/**
 * PostsApi - factory interface
 * @export
 */
export declare const PostsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by posts
     * @param {PostsAggregateInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByPosts(select: PostsAggregateInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByPosts200Response>;
    /**
     * Create multiple posts records
     * @param {Array<PostsCreateManyInput>} postsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyPosts(postsCreateManyInput: Array<PostsCreateManyInput>, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Create one posts record
     * @param {PostsCreateInput} postsCreateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOnePosts(postsCreateInput: PostsCreateInput, select?: PostsSelectInput, options?: any): AxiosPromise<CreateOnePosts201Response>;
    /**
     * Delete multiple posts records
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePosts(filter?: PostsWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Delete one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostsById(value: string, select?: PostsSelectInput, options?: any): AxiosPromise<CreateOnePosts201Response>;
    /**
     * Retrieve multiple posts records
     * @param {PostsSelectInput} [select]
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPosts(select?: PostsSelectInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindPosts200Response>;
    /**
     * Find one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPostsById(value: string, select?: PostsSelectInput, options?: any): AxiosPromise<CreateOnePosts201Response>;
    /**
     * Group by posts
     * @param {PostsGroupByInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<PostsScalarFieldEnum>} [groupBy]
     * @param {PostsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByPosts(select: PostsGroupByInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithAggregationInput>, groupBy?: Array<PostsScalarFieldEnum>, having?: PostsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByPosts200Response>;
    /**
     * Update multiple posts records
     * @param {PostsUpdateManyInput} postsUpdateManyInput
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePosts(postsUpdateManyInput: PostsUpdateManyInput, filter?: PostsWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Update one posts record by id
     * @param {string} value
     * @param {PostsUpdateInput} postsUpdateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostsById(value: string, postsUpdateInput: PostsUpdateInput, select?: PostsSelectInput, options?: any): AxiosPromise<CreateOnePosts201Response>;
};
/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export declare class PostsApi extends BaseAPI {
    /**
     * Aggregate by posts
     * @param {PostsAggregateInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    aggregateByPosts(select: PostsAggregateInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByPosts200Response, any>>;
    /**
     * Create multiple posts records
     * @param {Array<PostsCreateManyInput>} postsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    createManyPosts(postsCreateManyInput: Array<PostsCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Create one posts record
     * @param {PostsCreateInput} postsCreateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    createOnePosts(postsCreateInput: PostsCreateInput, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOnePosts201Response, any>>;
    /**
     * Delete multiple posts records
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    deletePosts(filter?: PostsWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Delete one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    deletePostsById(value: string, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOnePosts201Response, any>>;
    /**
     * Retrieve multiple posts records
     * @param {PostsSelectInput} [select]
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    findPosts(select?: PostsSelectInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindPosts200Response, any>>;
    /**
     * Find one posts record by id
     * @param {string} value
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    findPostsById(value: string, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOnePosts201Response, any>>;
    /**
     * Group by posts
     * @param {PostsGroupByInput} select
     * @param {PostsWhereInput} [filter]
     * @param {Array<PostsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<PostsScalarFieldEnum>} [groupBy]
     * @param {PostsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    groupByPosts(select: PostsGroupByInput, filter?: PostsWhereInput, orderBy?: Array<PostsOrderByWithAggregationInput>, groupBy?: Array<PostsScalarFieldEnum>, having?: PostsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByPosts200Response, any>>;
    /**
     * Update multiple posts records
     * @param {PostsUpdateManyInput} postsUpdateManyInput
     * @param {PostsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    updatePosts(postsUpdateManyInput: PostsUpdateManyInput, filter?: PostsWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Update one posts record by id
     * @param {string} value
     * @param {PostsUpdateInput} postsUpdateInput
     * @param {PostsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    updatePostsById(value: string, postsUpdateInput: PostsUpdateInput, select?: PostsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOnePosts201Response, any>>;
}
export declare const PostsApiService: PostsApi;
/**
 * ProblemsApi - axios parameter creator
 * @export
 */
export declare const ProblemsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by problems
     * @param {ProblemsAggregateInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByProblems: (select: ProblemsAggregateInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple problems records
     * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProblems: (problemsCreateManyInput: Array<ProblemsCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one problems record
     * @param {ProblemsCreateInput} problemsCreateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneProblems: (problemsCreateInput: ProblemsCreateInput, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple problems records
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProblems: (filter?: ProblemsWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProblemsById: (value: string, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple problems records
     * @param {ProblemsSelectInput} [select]
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProblems: (select?: ProblemsSelectInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProblemsById: (value: string, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by problems
     * @param {ProblemsGroupByInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
     * @param {ProblemsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByProblems: (select: ProblemsGroupByInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithAggregationInput>, groupBy?: Array<ProblemsScalarFieldEnum>, having?: ProblemsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple problems records
     * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProblems: (problemsUpdateManyInput: ProblemsUpdateManyInput, filter?: ProblemsWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one problems record by id
     * @param {string} value
     * @param {ProblemsUpdateInput} problemsUpdateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProblemsById: (value: string, problemsUpdateInput: ProblemsUpdateInput, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProblemsApi - functional programming interface
 * @export
 */
export declare const ProblemsApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by problems
     * @param {ProblemsAggregateInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByProblems(select: ProblemsAggregateInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByProblems200Response>>;
    /**
     * Create multiple problems records
     * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProblems(problemsCreateManyInput: Array<ProblemsCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Create one problems record
     * @param {ProblemsCreateInput} problemsCreateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneProblems(problemsCreateInput: ProblemsCreateInput, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneProblems201Response>>;
    /**
     * Delete multiple problems records
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProblems(filter?: ProblemsWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Delete one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProblemsById(value: string, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneProblems201Response>>;
    /**
     * Retrieve multiple problems records
     * @param {ProblemsSelectInput} [select]
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProblems(select?: ProblemsSelectInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindProblems200Response>>;
    /**
     * Find one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProblemsById(value: string, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneProblems201Response>>;
    /**
     * Group by problems
     * @param {ProblemsGroupByInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
     * @param {ProblemsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByProblems(select: ProblemsGroupByInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithAggregationInput>, groupBy?: Array<ProblemsScalarFieldEnum>, having?: ProblemsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByProblems200Response>>;
    /**
     * Update multiple problems records
     * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProblems(problemsUpdateManyInput: ProblemsUpdateManyInput, filter?: ProblemsWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Update one problems record by id
     * @param {string} value
     * @param {ProblemsUpdateInput} problemsUpdateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProblemsById(value: string, problemsUpdateInput: ProblemsUpdateInput, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneProblems201Response>>;
};
/**
 * ProblemsApi - factory interface
 * @export
 */
export declare const ProblemsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by problems
     * @param {ProblemsAggregateInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByProblems(select: ProblemsAggregateInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByProblems200Response>;
    /**
     * Create multiple problems records
     * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyProblems(problemsCreateManyInput: Array<ProblemsCreateManyInput>, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Create one problems record
     * @param {ProblemsCreateInput} problemsCreateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneProblems(problemsCreateInput: ProblemsCreateInput, select?: ProblemsSelectInput, options?: any): AxiosPromise<CreateOneProblems201Response>;
    /**
     * Delete multiple problems records
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProblems(filter?: ProblemsWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Delete one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProblemsById(value: string, select?: ProblemsSelectInput, options?: any): AxiosPromise<CreateOneProblems201Response>;
    /**
     * Retrieve multiple problems records
     * @param {ProblemsSelectInput} [select]
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProblems(select?: ProblemsSelectInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindProblems200Response>;
    /**
     * Find one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findProblemsById(value: string, select?: ProblemsSelectInput, options?: any): AxiosPromise<CreateOneProblems201Response>;
    /**
     * Group by problems
     * @param {ProblemsGroupByInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
     * @param {ProblemsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByProblems(select: ProblemsGroupByInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithAggregationInput>, groupBy?: Array<ProblemsScalarFieldEnum>, having?: ProblemsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByProblems200Response>;
    /**
     * Update multiple problems records
     * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProblems(problemsUpdateManyInput: ProblemsUpdateManyInput, filter?: ProblemsWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Update one problems record by id
     * @param {string} value
     * @param {ProblemsUpdateInput} problemsUpdateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProblemsById(value: string, problemsUpdateInput: ProblemsUpdateInput, select?: ProblemsSelectInput, options?: any): AxiosPromise<CreateOneProblems201Response>;
};
/**
 * ProblemsApi - object-oriented interface
 * @export
 * @class ProblemsApi
 * @extends {BaseAPI}
 */
export declare class ProblemsApi extends BaseAPI {
    /**
     * Aggregate by problems
     * @param {ProblemsAggregateInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    aggregateByProblems(select: ProblemsAggregateInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByProblems200Response, any>>;
    /**
     * Create multiple problems records
     * @param {Array<ProblemsCreateManyInput>} problemsCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    createManyProblems(problemsCreateManyInput: Array<ProblemsCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Create one problems record
     * @param {ProblemsCreateInput} problemsCreateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    createOneProblems(problemsCreateInput: ProblemsCreateInput, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneProblems201Response, any>>;
    /**
     * Delete multiple problems records
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    deleteProblems(filter?: ProblemsWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Delete one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    deleteProblemsById(value: string, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneProblems201Response, any>>;
    /**
     * Retrieve multiple problems records
     * @param {ProblemsSelectInput} [select]
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    findProblems(select?: ProblemsSelectInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindProblems200Response, any>>;
    /**
     * Find one problems record by id
     * @param {string} value
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    findProblemsById(value: string, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneProblems201Response, any>>;
    /**
     * Group by problems
     * @param {ProblemsGroupByInput} select
     * @param {ProblemsWhereInput} [filter]
     * @param {Array<ProblemsOrderByWithAggregationInput>} [orderBy]
     * @param {Array<ProblemsScalarFieldEnum>} [groupBy]
     * @param {ProblemsScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    groupByProblems(select: ProblemsGroupByInput, filter?: ProblemsWhereInput, orderBy?: Array<ProblemsOrderByWithAggregationInput>, groupBy?: Array<ProblemsScalarFieldEnum>, having?: ProblemsScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByProblems200Response, any>>;
    /**
     * Update multiple problems records
     * @param {ProblemsUpdateManyInput} problemsUpdateManyInput
     * @param {ProblemsWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    updateProblems(problemsUpdateManyInput: ProblemsUpdateManyInput, filter?: ProblemsWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Update one problems record by id
     * @param {string} value
     * @param {ProblemsUpdateInput} problemsUpdateInput
     * @param {ProblemsSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemsApi
     */
    updateProblemsById(value: string, problemsUpdateInput: ProblemsUpdateInput, select?: ProblemsSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneProblems201Response, any>>;
}
export declare const ProblemsApiService: ProblemsApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByUsers: (select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyUsers: (usersCreateManyInput: Array<UsersCreateManyInput>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneUsers: (usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers: (filter?: UsersWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByEmail: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersById: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers: (select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByEmail: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersById: (value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByUsers: (select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers: (usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByEmail: (value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersById: (value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByUsers(select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateByUsers200Response>>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyUsers(usersCreateManyInput: Array<UsersCreateManyInput>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneUsers(usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers(filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers(select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindUsers200Response>>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByUsers(select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupByUsers200Response>>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers(usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateManyDislikes201Response>>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByEmail(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersById(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOneUsers201Response>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateByUsers(select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<AggregateByUsers200Response>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createManyUsers(usersCreateManyInput: Array<UsersCreateManyInput>, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneUsers(usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsers(filter?: UsersWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersByEmail(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersById(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers(select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: any): AxiosPromise<FindUsers200Response>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersByEmail(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsersById(value: string, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupByUsers(select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: any): AxiosPromise<GroupByUsers200Response>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers(usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: any): AxiosPromise<CreateManyDislikes201Response>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersByEmail(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsersById(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: any): AxiosPromise<CreateOneUsers201Response>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Aggregate by users
     * @param {UsersAggregateInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    aggregateByUsers(select: UsersAggregateInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateByUsers200Response, any>>;
    /**
     * Create multiple users records
     * @param {Array<UsersCreateManyInput>} usersCreateManyInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createManyUsers(usersCreateManyInput: Array<UsersCreateManyInput>, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Create one users record
     * @param {UsersCreateInput} usersCreateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createOneUsers(usersCreateInput: UsersCreateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Delete multiple users records
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsers(filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Delete one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Delete one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Retrieve multiple users records
     * @param {UsersSelectInput} [select]
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithRelationInput>} [orderBy]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsers(select?: UsersSelectInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithRelationInput>, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FindUsers200Response, any>>;
    /**
     * Find one users record by email
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsersByEmail(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Find one users record by id
     * @param {string} value
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    findUsersById(value: string, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Group by users
     * @param {UsersGroupByInput} select
     * @param {UsersWhereInput} [filter]
     * @param {Array<UsersOrderByWithAggregationInput>} [orderBy]
     * @param {Array<UsersScalarFieldEnum>} [groupBy]
     * @param {UsersScalarWhereWithAggregatesInput} [having]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    groupByUsers(select: UsersGroupByInput, filter?: UsersWhereInput, orderBy?: Array<UsersOrderByWithAggregationInput>, groupBy?: Array<UsersScalarFieldEnum>, having?: UsersScalarWhereWithAggregatesInput, skip?: number, take?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupByUsers200Response, any>>;
    /**
     * Update multiple users records
     * @param {UsersUpdateManyInput} usersUpdateManyInput
     * @param {UsersWhereInput} [filter]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUsers(usersUpdateManyInput: UsersUpdateManyInput, filter?: UsersWhereInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateManyDislikes201Response, any>>;
    /**
     * Update one users record by email
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUsersByEmail(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
    /**
     * Update one users record by id
     * @param {string} value
     * @param {UsersUpdateInput} usersUpdateInput
     * @param {UsersSelectInput} [select]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    updateUsersById(value: string, usersUpdateInput: UsersUpdateInput, select?: UsersSelectInput, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOneUsers201Response, any>>;
}
export declare const UsersApiService: UsersApi;
